import asyncio
import re
import logging
from datetime import datetime
from playwright.async_api import (
    async_playwright,
    TimeoutError as PlaywrightTimeoutError,
)
from telegram import Bot
from dataclasses import dataclass
from typing import List, Optional, Dict
import json
import os

# ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log_filename = f'multi_sport_monitor_{datetime.now().strftime("%Y%m%d")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ –ü–ê–†–ê–ú–ï–¢–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TELEGRAM_TOKEN = "8195557403:AAGGWvI04F0jxswbDsk6gVQohz6KChBAho0"
CHAT_IDS = [
    "1599566837",
    "1422173650"
]

CHECK_EVERY = 30  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
VERIFICATION_ATTEMPTS = 3
SUCCESS_THRESHOLD = 2
ATTEMPT_DELAY = 2

# ü§ñ –ü–ê–†–ê–ú–ï–¢–†–´ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
AUTO_BOOKING_WINBOX = True  # –¢–æ–ª—å–∫–æ –¥–ª—è WinBox –ø–∞–¥–µ–ª
BOOK_FROM_LATE = True  # True = –ø–æ–∑–¥–Ω–∏–µ‚Üí—Ä–∞–Ω–Ω–∏–µ, False = —Ä–∞–Ω–Ω–∏–µ‚Üí–ø–æ–∑–¥–Ω–∏–µ
MAX_BOOKING_ATTEMPTS = 5
BOOKING_DELAY = 2

# üèÄ –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ü–ê–î–ï–õ
PADEL_SLOTS_TO_BOOK = 2
ZONA_SLOTS_TO_BOOK = 1  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# üîê –î–ê–ù–ù–´–ï –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò WINBOX - –î–í–ê –ê–ö–ö–ê–£–ù–¢–ê
WINBOX_ACCOUNTS = [
    {
        "email": "shvarev03@gmail.com",
        "password": "7538tuti",
        "name": "–ê–∫–∫–∞—É–Ω—Ç 1"
    },
    {
        "email": "shvarevftsha@mail.ru",  # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–¢–û–†–û–ô EMAIL!
        "password": "Arl1kino",      # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–¢–û–†–û–ô –ü–ê–†–û–õ–¨!
        "name": "–ê–∫–∫–∞—É–Ω—Ç 2"
    }
]

# ‚è∞ –¢–ê–ô–ú–ê–£–¢–´
PAGE_LOAD_TIMEOUT = 60000
ELEMENT_WAIT_TIMEOUT = 45000
DEFAULT_WAIT = 3000

@dataclass
class SiteConfig:
    name: str
    url: str
    dates: List[str]
    month_tab: Optional[str] = None
    check_type: str = "slots"
    sport_type: str = "padel"
    slots_to_book: int = 1
    needs_auth: bool = False
    enable_booking: bool = False
    account_index: Optional[int] = None  # –ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ê–ô–¢–û–í - –ü–ê–î–ï–õ –° –î–í–£–ú–Ø –ê–ö–ö–ê–£–ù–¢–ê–ú–ò
SITES = [
    SiteConfig(
        name="Winbox –ü–∞–¥–µ–ª (–ê–∫–∫–∞—É–Ω—Ç 1)",
        url="https://winboxmsk.ru/schedule?types=basketball",
        dates=["21", "22", "23", "24"],
        month_tab="–ê–í–ì–£–°–¢",
        check_type="slots",
        sport_type="padel",
        slots_to_book=PADEL_SLOTS_TO_BOOK,
        needs_auth=True,
        enable_booking=True,
        account_index=0  # –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    ),
    SiteConfig(
        name="Winbox –ü–∞–¥–µ–ª (–ê–∫–∫–∞—É–Ω—Ç 2)",
        url="https://winboxmsk.ru/schedule?types=basketball",
        dates=["21", "22", "23", "24"],
        month_tab="–ê–í–ì–£–°–¢",
        check_type="slots",
        sport_type="padel",
        slots_to_book=PADEL_SLOTS_TO_BOOK,
        needs_auth=True,
        enable_booking=True,
        account_index=1  # –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç
    ),
    SiteConfig(
        name="Zona Padela",
        url="https://n1594888.yclients.com/company/1434507/activity/select?o=act",
        dates=["21", "22", "23", "24"],
        month_tab="–ê–≤–≥—É—Å—Ç",
        check_type="clickable",
        sport_type="padel", 
        slots_to_book=ZONA_SLOTS_TO_BOOK,
        needs_auth=False,
        enable_booking=False,
        account_index=None
    )
]

# ‚úÖ –°–¢–û–ü-–°–õ–û–í–ê –î–õ–Ø –í–ò–ù–ë–û–ö–°–ê (–ö–û–ì–î–ê –ù–ï –£–í–ï–î–û–ú–õ–Ø–¢–¨)
STOP_WORDS_WINBOX = [
    "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "win box –æ—Ç–¥—ã—Ö–∞–µ—Ç", 
    "winbox –æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "–æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–≤–µ—Ä–Ω—ë–º—Å—è —Å–∫–æ—Ä–æ",
    "–∑–∞–∫—Ä—ã—Ç–æ",
    "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
]

CRITICAL_STOP_WORDS_ZONA = [
    "–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
    "—Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", 
    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
    "—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
    "–∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
]

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def login_to_winbox(page, account_index: int) -> bool:
    """üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    if account_index >= len(WINBOX_ACCOUNTS):
        print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {account_index}")
        return False
    
    account = WINBOX_ACCOUNTS[account_index]
    print(f"    üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox - {account['name']} ({account['email']})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ
        profile_indicators = [
            ':has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
            ':has-text("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")', 
            ':has-text("–í—ã–π—Ç–∏")',
            '[class*="profile"]',
            '[class*="user"]',
            ':has-text("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")'
        ]
        
        for indicator in profile_indicators:
            try:
                element = await page.query_selector(indicator)
                if element and await element.is_visible():
                    print(f"    ‚úÖ {account['name']} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return True
            except:
                continue
        
        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º - –≤—ã—Ö–æ–¥–∏–º
        logout_selectors = [
            'button:has-text("–í—ã–π—Ç–∏")',
            'a:has-text("–í—ã–π—Ç–∏")',
            'button:has-text("–í–´–ô–¢–ò")',
            'a:has-text("–í–´–ô–¢–ò")',
            '[class*="logout"]'
        ]
        
        for selector in logout_selectors:
            try:
                logout_btn = await page.query_selector(selector)
                if logout_btn and await logout_btn.is_visible():
                    print("    üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
                    await logout_btn.click()
                    await page.wait_for_timeout(3000)
                    break
            except:
                continue
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.wait_for_timeout(3000)
        
        # –ò—â–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–í–•–û–î"
        auth_triggers = [
            'button:has-text("–í–•–û–î")',
            'button:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'button:has-text("–í–æ–π—Ç–∏")',
            'a:has-text("–í–•–û–î")',
            'a:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'a:has-text("–í–æ–π—Ç–∏")',
            '[class*="auth"]',
            '[class*="login"]'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Ñ–æ—Ä–º—É
        email_field = None
        password_field = None
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è email
        email_selectors = [
            'input[type="email"]',
            'input[placeholder*="–ø–æ—á—Ç"]', 
            'input[placeholder*="email"]',
            'input[placeholder*="Email"]',
            'input[placeholder*="EMAIL"]',
            'input[name*="email"]',
            'input[id*="email"]',
            'input[autocomplete="email"]',
            'input[autocomplete="username"]'
        ]
        
        # –ò—â–µ–º –ø–æ–ª–µ email
        for selector in email_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    email_field = field
                    print("    üìß –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è email")
                    break
            except:
                continue
        
        # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not email_field:
            print("    üîç –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
            
            for trigger_selector in auth_triggers:
                try:
                    triggers = await page.query_selector_all(trigger_selector)
                    for trigger in triggers:
                        if await trigger.is_visible():
                            trigger_text = await trigger.text_content()
                            print(f"    üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{trigger_text}'")
                            await trigger.click()
                            await page.wait_for_timeout(3000)
                            break
                    if email_field:
                        break
                except Exception as e:
                    continue
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
            for selector in email_selectors:
                try:
                    field = await page.wait_for_selector(selector, timeout=10000)
                    if field and await field.is_visible():
                        email_field = field
                        print("    üìß –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è email –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã")
                        break
                except:
                    continue
        
        if not email_field:
            print("    ‚ùå –ü–æ–ª–µ –¥–ª—è email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
        password_selectors = [
            'input[type="password"]',
            'input[placeholder*="–ø–∞—Ä–æ–ª—å"]',
            'input[placeholder*="–ü–∞—Ä–æ–ª—å"]',
            'input[name*="password"]',
            'input[id*="password"]',
            'input[autocomplete="current-password"]'
        ]
        
        # –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        for selector in password_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    password_field = field
                    print("    üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è")
                    break
            except:
                continue
        
        if not password_field:
            print("    ‚ùå –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        print(f"    üìß –í–≤–æ–¥–∏–º email: {account['email']}")
        
        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ email
        await email_field.click()
        await page.wait_for_timeout(500)
        await email_field.evaluate('el => el.value = ""')
        await email_field.fill("")
        await page.wait_for_timeout(500)
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—á–∞—Ç–∞–µ–º email
        await email_field.type(account['email'], delay=150)
        await page.wait_for_timeout(1000)
        
        print("    üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
        
        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        await password_field.click()
        await page.wait_for_timeout(500)
        await password_field.evaluate('el => el.value = ""')
        await password_field.fill("")
        await page.wait_for_timeout(500)
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—á–∞—Ç–∞–µ–º –ø–∞—Ä–æ–ª—å
        await password_field.type(account['password'], delay=150)
        await page.wait_for_timeout(1000)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        submit_selectors = [
            'button:has-text("–í–û–ô–¢–ò")',
            'button:has-text("–í–æ–π—Ç–∏")',
            'button:has-text("–í–•–û–î")',
            'button[type="submit"]',
            'input[type="submit"]',
            'form button'
        ]
        
        submit_button = None
        for selector in submit_selectors:
            try:
                buttons = await page.query_selector_all(selector)
                for button in buttons:
                    if await button.is_visible():
                        is_enabled = await button.evaluate('el => !el.disabled && !el.classList.contains("disabled")')
                        if is_enabled:
                            submit_button = button
                            button_text = await button.text_content()
                            print(f"    üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: '{button_text.strip()}'")
                            break
                if submit_button:
                    break
            except:
                continue
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        if submit_button:
            await submit_button.click()
            print("    üëÜ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")
        else:
            print("    ‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter")
            try:
                await password_field.press('Enter')
                print("    ‚å®Ô∏è –ù–∞–∂–∞–ª–∏ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è")
            except:
                print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Enter")
                return False
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("    ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        await page.wait_for_timeout(7000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success_indicators = [
            ':has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
            ':has-text("–ü—Ä–æ—Ñ–∏–ª—å")',
            ':has-text("–í—ã–π—Ç–∏")',
            ':has-text("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")',
            '[class*="profile"]',
            '[class*="logout"]'
        ]
        
        for indicator in success_indicators:
            try:
                success_element = await page.wait_for_selector(indicator, timeout=3000)
                if success_element and await success_element.is_visible():
                    success_text = await success_element.text_content()
                    print(f"    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {account['name']} —É—Å–ø–µ—à–Ω–∞! –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: '{success_text.strip()}'")
                    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox - {account['name']}")
                    return True
            except:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        error_indicators = [
            ':has-text("–ù–µ–≤–µ—Ä–Ω—ã–π")',
            ':has-text("–û—à–∏–±–∫–∞")',
            ':has-text("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω")',
            '[class*="error"]'
        ]
        
        for indicator in error_indicators:
            try:
                error_element = await page.query_selector(indicator)
                if error_element and await error_element.is_visible():
                    error_text = await error_element.text_content()
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {account['name']}: {error_text.strip()}")
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox {account['name']}: {error_text}")
                    return False
            except:
                continue
        
        print(f"    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {account['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ)")
        return True
        
    except Exception as e:
        print(f"    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {account['name']}: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox {account['name']}: {e}")
        return False

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def send_notification(text: str) -> None:
    """üì¨ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    bot = Bot(TELEGRAM_TOKEN)
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
            print(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {chat_id}")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

def check_critical_stop_words(text: str, stop_words: List[str]) -> bool:
    """üõë –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤"""
    if not text:
        return False
    
    text_lower = text.lower()
    for stop_word in stop_words:
        if stop_word.lower() in text_lower:
            print(f"    üõë –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–¢–û–ü-–°–õ–û–í–û: '{stop_word}' –≤ —Ç–µ–∫—Å—Ç–µ")
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: {stop_word}")
            return True
    return False

def has_time_slots_in_text(text: str) -> bool:
    """üïê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)"""
    if not text:
        return False
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏: 10:00, 15:30, –∏ —Ç.–¥.
    time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
    time_matches = re.findall(time_pattern, text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (00:00 - 23:59)
    valid_times = []
    for hour, minute in time_matches:
        hour_int = int(hour)
        minute_int = int(minute)
        if 0 <= hour_int <= 23 and 0 <= minute_int <= 59:
            valid_times.append(f"{hour}:{minute}")
    
    if valid_times:
        print(f"    üïê –ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(valid_times[:5])}")
        return True
    
    return False

def parse_time_slot(slot_text: str) -> tuple:
    """üïê –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ—Ç–∞"""
    try:
        time_match = re.search(r'(\d{1,2}):(\d{2})', slot_text)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2))
            return (hour, minute)
        return (0, 0)
    except:
        return (0, 0)

# ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø WINBOX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def close_modal_and_return(page):
    """‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        close_selectors = [
            'button[aria-label="Close"]',
            'button[class*="close"]',
            'button:has-text("‚úï")',
            'button:has-text("√ó")',
            'button:has-text("X")',
            'button:has-text("–ó–∞–∫—Ä—ã—Ç—å")',
            'button:has-text("–û—Ç–º–µ–Ω–∞")',
            '.modal-close',
            '[data-dismiss="modal"]'
        ]
        
        for selector in close_selectors:
            try:
                close_button = await page.query_selector(selector)
                if close_button and await close_button.is_visible():
                    await close_button.click()
                    print("        ‚úÖ –ó–∞–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
                    await page.wait_for_timeout(1000)
                    return True
            except:
                continue
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º Escape
        try:
            await page.keyboard.press('Escape')
            print("        ‚úÖ –ó–∞–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ Escape")
            await page.wait_for_timeout(1000)
            return True
        except:
            pass
            
        return False
    except Exception as e:
        print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False

async def reload_and_reselect_date(page, config: SiteConfig, date: str):
    """üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É"""
    print("        üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É...")
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await page.goto(config.url, wait_until="networkidle")
        await page.wait_for_timeout(2000)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü
        if config.month_tab:
            try:
                await page.wait_for_selector(f"text={config.month_tab}", timeout=ELEMENT_WAIT_TIMEOUT)
                await page.click(f"text={config.month_tab}")
                await page.wait_for_timeout(DEFAULT_WAIT)
                print(f"          ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {config.month_tab}")
            except PlaywrightTimeoutError:
                print(f"          ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Å—è—Ü {config.month_tab}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ
        date_selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'*:has-text("{date}")',
            f'[data-date="{date}"]',
            f'[data-day="{date}"]',
            f'td:has-text("{date}")',
            f'span:has-text("{date}")'
        ]
        
        date_element = None
        for selector in date_selectors:
            try:
                elements = await page.query_selector_all(selector)
                for element in elements:
                    text_content = await element.text_content()
                    if text_content and text_content.strip() == date:
                        is_clickable = await element.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                const rect = el.getBoundingClientRect();
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       rect.width > 0 && rect.height > 0;
                            }
                        ''')
                        if is_clickable:
                            date_element = element
                            break
                if date_element:
                    break
            except:
                continue
        
        if date_element:
            await date_element.click()
            await page.wait_for_timeout(DEFAULT_WAIT)
            print(f"          ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {date}")
            return True
        else:
            print(f"          ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É {date}")
            return False
            
    except Exception as e:
        print(f"          ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        return False

async def try_book_winbox_slot(page, slot_element, slot_text: str, config: SiteConfig) -> bool:
    """üéØ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç"""
    try:
        print(f"            üéØ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç: {slot_text}")
        
        # –ö–ª–∏–∫–∞–µ–º –Ω–∞ —Å–ª–æ—Ç
        await slot_element.click()
        await page.wait_for_timeout(BOOKING_DELAY * 1000)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        book_button_selectors = [
            'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
            'button:has-text("–ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨")',
            'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
            'button:has-text("–ü–û–î–¢–í–ï–†–î–ò–¢–¨")',
            'button:has-text("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")',
            'button:has-text("–ó–ê–ü–ò–°–ê–¢–¨–°–Ø")',
            'button[class*="book"]',
            'button[class*="confirm"]',
            'input[type="submit"]',
            'button[type="submit"]'
        ]
        
        book_button = None
        for selector in book_button_selectors:
            try:
                buttons = await page.query_selector_all(selector)
                for button in buttons:
                    if await button.is_visible():
                        is_enabled = await button.evaluate('el => !el.disabled && !el.classList.contains("disabled")')
                        if is_enabled:
                            book_button = button
                            break
                if book_button:
                    break
            except:
                continue
        
        if book_button:
            button_text = await book_button.text_content()
            print(f"            üëÜ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É: '{button_text.strip()}'")
            await book_button.click()
            await page.wait_for_timeout(3000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            success_indicators = [
                ':has-text("—É—Å–ø–µ—à–Ω–æ")',
                ':has-text("–£—Å–ø–µ—à–Ω–æ")',
                ':has-text("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")',
                ':has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")',
                ':has-text("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")',
                ':has-text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")',
                '[class*="success"]',
                '[class*="confirmed"]'
            ]
            
            for indicator in success_indicators:
                try:
                    success_element = await page.wait_for_selector(indicator, timeout=5000)
                    if success_element and await success_element.is_visible():
                        success_text = await success_element.text_content()
                        print(f"            ‚úÖ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û! {slot_text} - {success_text}")
                        logger.info(f"–£–°–ü–ï–®–ù–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –ø–∞–¥–µ–ª: {slot_text} - {success_text}")
                        return True
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            error_indicators = [
                ':has-text("–æ—à–∏–±–∫–∞")',
                ':has-text("–û—à–∏–±–∫–∞")',
                ':has-text("–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")',
                ':has-text("–∑–∞–Ω—è—Ç–æ")',
                '[class*="error"]'
            ]
            
            for indicator in error_indicators:
                try:
                    error_element = await page.query_selector(indicator)
                    if error_element and await error_element.is_visible():
                        error_text = await error_element.text_content()
                        print(f"            ‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {error_text.strip()}")
                        return False
                except:
                    continue
            
            print(f"            ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ)")
            return True
        else:
            print(f"            ‚ùå –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–ª–æ—Ç–∞: {slot_text}")
            return False
        
    except Exception as e:
        print(f"            ‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞ {slot_text}: {e}")
        return False

async def book_winbox_slots(page, date: str, config: SiteConfig) -> List[str]:
    """ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox"""
    if not config.enable_booking:
        print(f"        üìµ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è {config.name}")
        return []
    
    print(f"        ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {config.sport_type} –¥–ª—è –¥–∞—Ç—ã {date}...")
    print(f"        üéØ –¶–µ–ª—å: –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {config.slots_to_book} —Å–ª–æ—Ç(–æ–≤)")
    
    booked_slots = []
    
    try:
        # –ò—â–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_selectors = [
            'button:has-text(":")',
            '[class*="time"]:has-text(":")',
            '[class*="slot"]:has-text(":")',
            'button[class*="available"]:has-text(":")',
            'div[class*="time"]:has-text(":")',
            '[data-time]',
            '[class*="schedule-slot"]',
            '[class*="time-slot"]',
            '.slot:has-text(":")',
            'button[class*="slot"]:has-text(":")'
        ]
        
        all_slots = []
        
        for selector in time_selectors:
            try:
                slots = await page.query_selector_all(selector)
                for slot in slots:
                    slot_text = await slot.text_content()
                    if slot_text and ':' in slot_text and len(slot_text.strip()) < 20:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                        is_available = await slot.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                const rect = el.getBoundingClientRect();
                                
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       style.opacity !== "0.5" &&
                                       rect.width > 0 && rect.height > 0 &&
                                       !el.classList.contains('disabled') &&
                                       !el.classList.contains('booked') &&
                                       !el.classList.contains('unavailable') &&
                                       !el.classList.contains('occupied') &&
                                       !el.classList.contains('reserved');
                            }
                        ''')
                        
                        if is_available:
                            all_slots.append((slot, slot_text.strip()))
            except:
                continue
        
        if not all_slots:
            print(f"        ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ {date}")
            return []
        
        print(f"        üìÖ –ù–∞–π–¥–µ–Ω–æ {len(all_slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {date}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        slots_with_time = []
        for slot_element, slot_text in all_slots:
            hour, minute = parse_time_slot(slot_text)
            slots_with_time.append((slot_element, slot_text, hour, minute))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –ø–æ–∑–¥–Ω–∏—Ö –∫ —Ä–∞–Ω–Ω–∏–º –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        if BOOK_FROM_LATE:
            slots_with_time.sort(key=lambda x: (x[2], x[3]), reverse=True)
            print(f"        ‚è∞ –ü–æ—Ä—è–¥–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç –ø–æ–∑–¥–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –∫ —Ä–∞–Ω–Ω–∏–º")
        else:
            slots_with_time.sort(key=lambda x: (x[2], x[3]))
            print(f"        ‚è∞ –ü–æ—Ä—è–¥–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç —Ä–∞–Ω–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –∫ –ø–æ–∑–¥–Ω–∏–º")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
        booking_attempts = 0
        successful_bookings = 0
        
        for slot_element, slot_text, hour, minute in slots_with_time:
            if booking_attempts >= MAX_BOOKING_ATTEMPTS:
                print(f"        üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({MAX_BOOKING_ATTEMPTS})")
                break
                
            if successful_bookings >= config.slots_to_book:
                print(f"        üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ {successful_bookings} —Å–ª–æ—Ç–æ–≤ - —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                break
            
            booking_attempts += 1
            
            try:
                if await try_book_winbox_slot(page, slot_element, slot_text, config):
                    booked_slots.append(f"{slot_text} ({hour:02d}:{minute:02d})")
                    successful_bookings += 1
                    print(f"        ‚úÖ –£–°–ü–ï–®–ù–û –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å–ª–æ—Ç {successful_bookings}/{config.slots_to_book}: {slot_text}")
                    logger.info(f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω {config.sport_type} —Å–ª–æ—Ç: {slot_text}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    await close_modal_and_return(page)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    await page.wait_for_timeout(2000)
                    
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if successful_bookings < config.slots_to_book:
                        await reload_and_reselect_date(page, config, date)
                        # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                        break
                else:
                    print(f"        ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç: {slot_text}")
            except Exception as e:
                print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞ {slot_text}: {e}")
                continue
        
        return booked_slots
        
    except Exception as e:
        print(f"        ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {config.sport_type}: {e}")
        return []

# ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ZONA PADELA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def determine_slot_availability(text: str, container) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
    text_lower = text.lower()
    
    # ‚úÖ –Ø–í–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –ù–ï–î–û–°–¢–£–ü–ù–û–°–¢–ò (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    unavailable_indicators = [
        '–Ω–µ—Ç –º–µ—Å—Ç',
        '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        '–∑–∞–Ω—è—Ç–æ',
        '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        '–∑–∞–∫—Ä—ã—Ç–æ',
        '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
        '–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç–æ',
        '–º–µ—Å—Ç: 0',
        '–æ—Å—Ç–∞–ª–æ—Å—å: 0',
        '—Å–≤–æ–±–æ–¥–Ω–æ: 0',
        '–º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
        '–∑–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'
    ]
    
    for indicator in unavailable_indicators:
        if indicator in text_lower:
            return "unavailable"
    
    # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: "–û—Å—Ç–∞–ª–æ—Å—å X –º–µ—Å—Ç–æ/–º–µ—Å—Ç"
    remains_patterns = [
        r'–æ—Å—Ç–∞–ª–æ—Å—å\s+(\d+)\s+–º–µ—Å—Ç[–æ–∞]?',
        r'–æ—Å—Ç–∞–ª–æ—Å—å\s+(\d+)',
        r'–æ—Å—Ç–∞–µ—Ç—Å—è\s+(\d+)\s+–º–µ—Å—Ç[–æ–∞]?',
    ]
    
    for pattern in remains_patterns:
        remains_match = re.search(pattern, text_lower)
        if remains_match:
            places_count = int(remains_match.group(1))
            print(f"          üéØ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß–ï–í–û–ô –ò–ù–î–ò–ö–ê–¢–û–†: '–û—Å—Ç–∞–ª–æ—Å—å {places_count} –º–µ—Å—Ç–æ/–º–µ—Å—Ç'")
            return "available" if places_count > 0 else "unavailable"
    
    # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –î–†–£–ì–ò–ï –ü–ê–¢–¢–ï–†–ù–´ –ö–û–õ–ò–ß–ï–°–¢–í–ê –î–û–°–¢–£–ü–ù–´–• –ú–ï–°–¢
    places_patterns = [
        r'(\d+)\s*—Å–≤–æ–±–æ–¥–Ω',
        r'(\d+)\s*–¥–æ—Å—Ç—É–ø–Ω',
        r'—Å–≤–æ–±–æ–¥–Ω–æ:\s*(\d+)',
        r'–º–µ—Å—Ç:\s*(\d+)',
        r'–¥–æ—Å—Ç—É–ø–Ω–æ\s*(\d+)',
        r'(\d+)\s*–º–µ—Å—Ç.*–¥–æ—Å—Ç—É–ø–Ω',
    ]
    
    for pattern in places_patterns:
        places_match = re.search(pattern, text_lower)
        if places_match:
            places_count = int(places_match.group(1))
            print(f"          üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {places_count}")
            return "available" if places_count > 0 else "unavailable"
    
    # ‚úÖ –Ø–í–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò
    available_indicators = [
        '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å',
        '–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è',
        '–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏',
        '—Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞',
        '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–µ—Å—Ç—å –º–µ—Å—Ç–∞',
        '–∞—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç–∞'
    ]
    
    for indicator in available_indicators:
        if indicator in text_lower:
            print(f"          ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: '{indicator}'")
            return "available"
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    print(f"          ‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ù–ï–î–û–°–¢–£–ü–ï–ù")
    return "unavailable"

async def analyze_available_slots(page, date: str) -> List[str]:
    """üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –Ω–∞ Zona Padela"""
    print(f"      üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date}...")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date}")
    
    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—è
        page_text = await page.evaluate('() => document.body.innerText')
        
        date_specific_stops = [
            f"{date} –∞–≤–≥—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"{date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"–Ω–∞ {date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"{date}.08 - –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
        ]
        
        all_critical_stops = CRITICAL_STOP_WORDS_ZONA + date_specific_stops
        
        if check_critical_stop_words(page_text, all_critical_stops):
            print(f"      ‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –¥–∞—Ç—ã {date}")
            return []
        
        # ‚úÖ –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å "–û—Å—Ç–∞–ª–æ—Å—å X –º–µ—Å—Ç–æ"
        remains_elements = await page.query_selector_all('*:has-text("–æ—Å—Ç–∞–ª–æ—Å—å")')
        available_slots = []
        
        for element in remains_elements:
            try:
                element_text = await element.text_content()
                if element_text and '–æ—Å—Ç–∞–ª–æ—Å—å' in element_text.lower():
                    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
                    time_match = re.search(r'(\d{1,2}:\d{2})', element_text)
                    if time_match:
                        time_text = time_match.group(1)
                        availability = await determine_slot_availability(element_text, element)
                        
                        if availability == "available":
                            available_slots.append(time_text)
                            print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç: {time_text}")
            except:
                continue
        
        if available_slots:
            print(f"      üéâ –ù–ê–ô–î–ï–ù–´ –¢–û–ß–ù–û –î–û–°–¢–£–ü–ù–´–ï –°–õ–û–¢–´:")
            for slot in available_slots:
                print(f"        ‚úÖ {slot}")
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç: {slot}")
        else:
            print(f"      ‚ùå –ù–ï–¢ —Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date}")
        
        return available_slots
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ—Ç–æ–≤: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è {date}: {e}")
        return []

async def check_zona_padela_date_single(page, date: str, config: SiteConfig) -> List[str]:
    """üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞ Zona Padela"""
    print(f"    üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date}...")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date} –Ω–∞ Zona Padela")

    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto(config.url, wait_until="domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
        await page.wait_for_timeout(DEFAULT_WAIT * 2)

        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–≤–≥—É—Å—Ç)
        if config.month_tab:
            month_found = False
            selectors = [
                f'button:has-text("{config.month_tab}")',
                f'div:has-text("{config.month_tab}")',
                f'span:has-text("{config.month_tab}")',
            ]
            for selector in selectors:
                try:
                    elem = await page.query_selector(selector)
                    if elem:
                        await elem.click()
                        await page.wait_for_timeout(DEFAULT_WAIT)
                        print(f"      ‚úÖ –ö–ª–∏–∫ –ø–æ –º–µ—Å—è—Ü—É {config.month_tab}")
                        month_found = True
                        break
                except Exception:
                    continue

        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–Ω—è
        calendar_selectors = [
            f'td:has-text("{date}"):not([class*="other-month"]):not([class*="disabled"])',
            f'button:has-text("{date}"):not([disabled])',
            f'div:has-text("{date}"):not([class*="disabled"])',
            f'span:has-text("{date}"):not([class*="disabled"])'
        ]

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–Ω—è. –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä—ã–π/disabled).
        target_elem = None
        for selector in calendar_selectors:
            elems = await page.query_selector_all(selector)
            for el in elems:
                try:
                    text = (await el.text_content() or '').strip()
                    is_disabled = await el.get_attribute('disabled')
                    class_attr = await el.get_attribute('class') or ''
                    if text == str(int(date)):  # –¥–ª—è 08 ‚Üí 8
                        if not is_disabled and "disabled" not in class_attr:
                            target_elem = el
                            break
                except Exception:
                    continue
            if target_elem:
                break

        if not target_elem:
            print(f"      ‚ùå –î–∞—Ç–∞ {date}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞")
            return []

        await target_elem.click()
        print(f"      ‚úÖ –ö–ª–∏–∫ –ø–æ –¥–∞—Ç–µ {date} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await page.wait_for_timeout(DEFAULT_WAIT * 2)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        return await analyze_available_slots(page, date)

    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã {date}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
        return []

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò WINBOX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def check_winbox_date_single(page, date: str, config: SiteConfig) -> Dict:
    """üìÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞ WinBox —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
    print(f"    üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date} –¥–ª—è {config.sport_type} ({config.name})...")
    
    try:
        # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –¥–∞—Ç–µ
        date_selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'*:has-text("{date}")',
            f'[data-date="{date}"]',
            f'[data-day="{date}"]',
            f'td:has-text("{date}")',
            f'span:has-text("{date}")'
        ]
        
        date_element = None
        for selector in date_selectors:
            try:
                elements = await page.query_selector_all(selector)
                for element in elements:
                    text_content = await element.text_content()
                    if text_content and text_content.strip() == date:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                        is_clickable = await element.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                const rect = el.getBoundingClientRect();
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       rect.width > 0 && rect.height > 0;
                            }
                        ''')
                        if is_clickable:
                            date_element = element
                            break
                if date_element:
                    break
            except:
                continue
        
        if not date_element:
            print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ {date}")
            return {"status": "date_not_found", "message": f"–î–∞—Ç–∞ {date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        await date_element.click()
        await page.wait_for_timeout(DEFAULT_WAIT)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            page_text = await page.evaluate('() => document.body.innerText')
            print(f"      üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞—Ç—ã {date}")
            
            # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–æ–ø-—Å–ª–æ–≤
            has_time_slots = has_time_slots_in_text(page_text)
            has_stop_words = check_critical_stop_words(page_text, STOP_WORDS_WINBOX)
            
            print(f"      üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {'–î–ê' if has_time_slots else '–ù–ï–¢'}")
            print(f"      üõë –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {'–î–ê' if has_stop_words else '–ù–ï–¢'}")
            
            # ‚úÖ –ï–°–õ–ò –ï–°–¢–¨ –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ –ò –ù–ï–¢ –°–¢–û–ü-–°–õ–û–í - —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –Ω–æ–≤–æ—Å—Ç—å!
            if has_time_slots and not has_stop_words:
                print(f"      üéâ –ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –ë–ï–ó —Å—Ç–æ–ø-—Å–ª–æ–≤! –≠—Ç–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã.")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
                time_matches = re.findall(time_pattern, page_text)
                found_times = []
                
                for hour, minute in time_matches:
                    hour_int = int(hour)
                    minute_int = int(minute)
                    if 0 <= hour_int <= 23 and 0 <= minute_int <= 59:
                        found_times.append(f"{hour}:{minute}")
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                unique_times = list(set(found_times))
                unique_times.sort()
                
                print(f"      ‚è∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(unique_times[:10])}")
                
                return {
                    "status": "time_slots_detected",
                    "slots": unique_times,
                    "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã ({len(unique_times)} —à—Ç.)",
                    "has_stop_words": False
                }
            
            # ‚úÖ –ï–°–õ–ò –ï–°–¢–¨ –°–¢–û–ü-–°–õ–û–í–ê - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤—Å—ë-—Ç–∞–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            if has_stop_words:
                if has_time_slots:
                    print(f"      ‚ö†Ô∏è –ï—Å—Ç—å –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã - –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å—Ç–æ–ø-—Å–ª–æ–≤
                    time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
                    time_matches = re.findall(time_pattern, page_text)
                    found_times = []
                    
                    for hour, minute in time_matches:
                        hour_int = int(hour)
                        minute_int = int(minute)
                        if 0 <= hour_int <= 23 and 0 <= minute_int <= 59:
                            found_times.append(f"{hour}:{minute}")
                    
                    unique_times = list(set(found_times))
                    unique_times.sort()
                    
                    return {
                        "status": "time_slots_with_stop_words",
                        "slots": unique_times,
                        "message": f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞",
                        "has_stop_words": True
                    }
                else:
                    print(f"      üõë –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                    return {
                        "status": "no_slots",
                        "message": "–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç",
                        "has_stop_words": True
                    }
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        
        # ‚úÖ –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        time_selectors = [
            'button:has-text(":")',
            '[class*="time"]',
            '[class*="slot"]',
            'button[class*="available"]',
            'div[class*="time"]:has-text(":")',
            '[data-time]'
        ]
        
        available_slots = []
        for selector in time_selectors:
            try:
                slots = await page.query_selector_all(selector)
                for slot in slots:
                    slot_text = await slot.text_content()
                    if slot_text and ':' in slot_text and len(slot_text.strip()) < 20:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
                        is_available = await slot.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       style.opacity !== "0.5" &&
                                       !el.classList.contains('disabled') &&
                                       !el.classList.contains('booked');
                            }
                        ''')
                        if is_available:
                            available_slots.append(slot_text.strip())
            except:
                continue
        
        if available_slots:
            print(f"      ‚úÖ –î–∞—Ç–∞ {date}: –Ω–∞–π–¥–µ–Ω–æ {len(available_slots)} –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–• {config.sport_type} —Å–ª–æ—Ç–æ–≤")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            booked_slots = []
            if config.enable_booking:
                booked_slots = await book_winbox_slots(page, date, config)
                if booked_slots:
                    print(f"      üéâ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã {config.sport_type} —Å–ª–æ—Ç—ã: {', '.join(booked_slots)}")
                    logger.info(f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã {config.sport_type} —Å–ª–æ—Ç—ã {date}: {', '.join(booked_slots)}")
            
            return {
                "status": "available",
                "slots": available_slots,
                "booked_slots": booked_slots,
                "message": f"–î–æ—Å—Ç—É–ø–Ω–æ {len(available_slots)} –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
            }
        
        print(f"      ‚ö†Ô∏è –î–∞—Ç–∞ {date}: –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ {config.sport_type} —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return {"status": "no_clickable_slots", "message": "–ù–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"}
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WinBox {date}: {e}")
        return {"status": "error", "message": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"}

# ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –¢–†–û–ô–ù–û–ô –ü–†–û–í–ï–†–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def verify_date_multiple_times(page, date: str, config: SiteConfig) -> List[str]:
    """üîÑ –¢–†–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–∞—Ç—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"  üîÑ –¢–†–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–∞—Ç—ã {date} –¥–ª—è {config.sport_type} ({VERIFICATION_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫)...")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–æ–π–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã {date} {config.sport_type}")
    
    all_found_slots = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    successful_checks = 0
    time_slots_detected = False  # –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    
    for attempt in range(1, VERIFICATION_ATTEMPTS + 1):
        print(f"    üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{VERIFICATION_ATTEMPTS} –¥–ª—è –¥–∞—Ç—ã {date}...")
        
        try:
            if config.check_type == "slots":
                # –î–ª—è WinBox - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤
                result = await check_winbox_date_single(page, date, config)
                status = result.get("status")
                
                # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                if status == "available":
                    successful_checks += 1
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–û {len(slots)} –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–• —Å–ª–æ—Ç–æ–≤")
                elif status == "time_slots_detected":
                    successful_checks += 1
                    time_slots_detected = True
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      üïê –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–´ –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ ({len(slots)} —à—Ç.)")
                elif status == "time_slots_with_stop_words":
                    # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã, –Ω–æ –µ—Å—Ç—å –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                    time_slots_detected = True
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ + –°–¢–û–ü-–°–õ–û–í–ê ({len(slots)} —à—Ç.)")
                else:
                    print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ï –ù–ê–ô–î–ï–ù–û")
                    
            elif config.check_type == "clickable":
                # –î–ª—è Zona Padela - –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
                slots = await check_zona_padela_date_single(page, date, config)
                if slots:
                    successful_checks += 1
                    all_found_slots.update(slots)
                    print(f"      ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–û {len(slots)} —Å–ª–æ—Ç–æ–≤")
                else:
                    print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            else:
                print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü –ü–†–û–í–ï–†–ö–ò")
                
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < VERIFICATION_ATTEMPTS:
                await asyncio.sleep(ATTEMPT_DELAY)
                
        except Exception as e:
            print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –û–®–ò–ë–ö–ê - {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {date}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success_rate = successful_checks / VERIFICATION_ATTEMPTS
    print(f"  üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è –¥–∞—Ç—ã {date}: {successful_checks}/{VERIFICATION_ATTEMPTS} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ ({success_rate*100:.1f}%)")
    print(f"  üìã –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(all_found_slots)}")
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    if successful_checks >= SUCCESS_THRESHOLD or time_slots_detected:
        print(f"  üéâ –î–∞—Ç–∞ {date}: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê ({successful_checks} >= {SUCCESS_THRESHOLD} –∏–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã)")
        logger.info(f"–î–∞—Ç–∞ {date} {config.sport_type} –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: {successful_checks}/{VERIFICATION_ATTEMPTS}")
        return list(all_found_slots)
    else:
        print(f"  ‚ùå –î–∞—Ç–∞ {date}: –ù–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê ({successful_checks} < {SUCCESS_THRESHOLD})")
        return []

# ‚îÄ‚îÄ‚îÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def check_site_comprehensive(config: SiteConfig) -> Dict[str, any]:
    """üè¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ –Ω–∞ –≤—Å–µ –¥–∞—Ç—ã —Å —Ç—Ä–æ–π–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    print(f"üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {config.name}...")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É {config.name}")
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,
            args=[
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
            ]
        )
        
        context = await browser.new_context(
            viewport={'width': 1920, 'height': 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        )
        
        page = await context.new_page()
        page.set_default_timeout(ELEMENT_WAIT_TIMEOUT)
        
        try:
            print(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º {config.name}: {config.url}")
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {config.name}: {config.url}")
            
            await page.goto(config.url, wait_until="networkidle", timeout=PAGE_LOAD_TIMEOUT)
            await page.wait_for_timeout(DEFAULT_WAIT * 2)
            
            # ‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–ê WINBOX (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            if config.needs_auth and 'winbox' in config.url.lower() and config.account_index is not None:
                if not await login_to_winbox(page, config.account_index):
                    print(f"‚ùå {config.name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                    logger.error(f"{config.name}: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    return {"status": "auth_failed", "dates": {}, "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"}
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                await page.goto(config.url, wait_until="networkidle")
                print(f"    üîÑ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ä–∞–∑–¥–µ–ª {config.sport_type}")
                await page.wait_for_timeout(2000)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü
            if config.month_tab:
                try:
                    await page.wait_for_selector(f"text={config.month_tab}", timeout=ELEMENT_WAIT_TIMEOUT)
                    await page.click(f"text={config.month_tab}")
                    await page.wait_for_timeout(DEFAULT_WAIT)
                    print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {config.month_tab}")
                except PlaywrightTimeoutError:
                    print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Å—è—Ü {config.month_tab}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¥–∞—Ç–∞–º
            date_results = {}
            
            for date in config.dates:
                try:
                    # ‚úÖ –¢–†–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
                    slots = await verify_date_multiple_times(page, date, config)
                    if slots:
                        date_results[date] = {
                            "available": True,
                            "slots": slots,
                            "count": len(slots)
                        }
                    else:
                        date_results[date] = {
                            "available": False,
                            "slots": [],
                            "count": 0
                        }
                except Exception as e:
                    print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {config.name} {date}: {e}")
                    date_results[date] = {
                        "available": False,
                        "slots": [],
                        "count": 0,
                        "error": str(e)
                    }
            
            # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
            available_dates = [date for date, result in date_results.items() if result["available"]]
            total_slots = sum(result["count"] for result in date_results.values())
            
            if available_dates:
                print(f"üéâ {config.name}: –ù–ê–ô–î–ï–ù–´ –°–õ–û–¢–´!")
                print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(available_dates)}")
                print(f"‚è∞ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total_slots}")
                
                return {
                    "status": "available",
                    "dates": date_results,
                    "available_dates": available_dates,
                    "total_slots": total_slots,
                    "message": f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–æ—Ç—ã –Ω–∞ {len(available_dates)} –¥–∞—Ç"
                }
            else:
                print(f"‚ö†Ô∏è {config.name}: —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return {
                    "status": "no_slots",
                    "dates": date_results,
                    "available_dates": [],
                    "total_slots": 0,
                    "message": "–°–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {config.name}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {config.name}: {e}")
            return {
                "status": "error",
                "dates": {},
                "message": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            }
            
        finally:
            await context.close()
            await browser.close()

async def monitor_sites():
    """üîÑ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º v4.0!")
    print("üÜï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –í–ï–†–°–ò–ò 4.0:")
    print("   üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ WinBox")
    print("   üïê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã")
    print("   ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–¥–µ–ª —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox")
    print("   üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –æ–±–æ–∏—Ö —Å–∞–π—Ç–∞—Ö")
    print("   üîÑ –¢—Ä–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    print("   üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print()
    
    logger.info("=== –ó–ê–ü–£–°–ö –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê v4.0 ===")
    logger.info(f"–§–∞–π–ª –ª–æ–≥–æ–≤: {log_filename}")
    
    # ‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û–ë –ê–ö–ö–ê–£–ù–¢–ê–•
    print("‚úÖ –ù–ê–°–¢–†–û–ï–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ WINBOX:")
    for i, account in enumerate(WINBOX_ACCOUNTS):
        print(f"   {i+1}. {account['name']}: {account['email']} (–ø–∞—Ä–æ–ª—å: {'*' * len(account['password'])})")
    
    if WINBOX_ACCOUNTS[1]['email'] == "–≤—Ç–æ—Ä–æ–π_email@gmail.com":
        print("üö® –í–ù–ò–ú–ê–ù–ò–ï! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        print("   üìß WINBOX_ACCOUNTS[1]['email']: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π email")
        print("   üîë WINBOX_ACCOUNTS[1]['password']: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    startup_message = (
        "üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù! v4.0\n\n"
        f"üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:\n"
    )
    
    for site in SITES:
        booking_status = "ü§ñ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï" if site.enable_booking else "üì¢ –¢–û–õ–¨–ö–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø"
        account_info = ""
        if site.account_index is not None:
            account_info = f" ({WINBOX_ACCOUNTS[site.account_index]['name']})"
        startup_message += f"‚Ä¢ {site.name}{account_info} - {booking_status}\n"
    
    startup_message += f"\n‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_EVERY} —Å–µ–∫—É–Ω–¥"
    startup_message += f"\nüîç –¢—Ä–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ({VERIFICATION_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫)"
    startup_message += f"\nüÜï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–∞–∂–µ –±–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏"
    await send_notification(startup_message)
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    previous_states = {}
    
    try:
        while True:
            print(f"\n{'='*80}")
            print(f"üïê –¶–ò–ö–õ –ü–†–û–í–ï–†–ö–ò –í {datetime.now().strftime('%H:%M:%S')}")
            print(f"{'='*80}")
            
            for site_config in SITES:
                print(f"\nüè¢ {site_config.name}")
                print(f"üîó {site_config.url}")
                print(f"üéæ –°–ø–æ—Ä—Ç: {site_config.sport_type}")
                booking_info = "ü§ñ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï" if site_config.enable_booking else "üì¢ –¢–û–õ–¨–ö–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø"
                print(f"üìã –†–µ–∂–∏–º: {booking_info}")
                
                if site_config.account_index is not None:
                    account_info = WINBOX_ACCOUNTS[site_config.account_index]
                    print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_info['name']} ({account_info['email']})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ
                site_result = await check_site_comprehensive(site_config)
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ –∫–∞–∂–¥–æ–π –¥–∞—Ç–µ
                for date in site_config.dates:
                    site_date_key = f"{site_config.name}_{date}"
                    
                    current_date_result = site_result.get("dates", {}).get(date, {})
                    previous_date_result = previous_states.get(site_date_key, {})
                    
                    current_available = current_date_result.get("available", False)
                    previous_available = previous_date_result.get("available", False)
                    
                    current_slots = current_date_result.get("slots", [])
                    previous_slots = previous_date_result.get("slots", [])
                    
                    # –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    should_notify = False
                    notification_text = ""
                    
                    # –°–ª—É—á–∞–π 1: –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã (—Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–æ, —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å)
                    if current_available and not previous_available:
                        should_notify = True
                        slots_preview = ", ".join(current_slots[:5])
                        if len(current_slots) > 5:
                            slots_preview += "..."
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–æ—Ç–æ–≤ –¥–ª—è WinBox
                        slot_type_info = ""
                        if 'winbox' in site_config.url.lower():
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ —Å–ª–æ—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å)
                            clickable_times = [slot for slot in current_slots if len(slot) <= 8 and ':' in slot]
                            if clickable_times:
                                slot_type_info = f"\nüéØ –¢–∏–ø: –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ï —Å–ª–æ—Ç—ã ({len(clickable_times)} —à—Ç.)"
                            else:
                                slot_type_info = f"\nüïê –¢–∏–ø: –í–†–ï–ú–ï–ù–ù–´–ï —Å–ª–æ—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã)"
                        
                        notification_text = (
                            f"üéØ –ù–û–í–´–ï –°–õ–û–¢–´ –ü–û–Ø–í–ò–õ–ò–°–¨!\n\n"
                            f"üè¢ {site_config.name}\n"
                            f"üìÖ –î–∞—Ç–∞: {date}\n"
                            f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {site_config.sport_type}\n"
                            f"‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã ({len(current_slots)}): {slots_preview}{slot_type_info}\n\n"
                            f"üîó {site_config.url}"
                        )
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è WinBox
                        if site_config.enable_booking and 'winbox' in site_config.url.lower():
                            notification_text += f"\n\nü§ñ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï: –≤–∫–ª—é—á–µ–Ω–æ (—Ü–µ–ª—å: {site_config.slots_to_book} —Å–ª–æ—Ç–∞)"
                            notification_text += f"\n‚è∞ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {'–ø–æ–∑–¥–Ω–∏–µ‚Üí—Ä–∞–Ω–Ω–∏–µ' if BOOK_FROM_LATE else '—Ä–∞–Ω–Ω–∏–µ‚Üí–ø–æ–∑–¥–Ω–∏–µ'}"
                            notification_text += f"\nüë§ –ê–∫–∫–∞—É–Ω—Ç: {WINBOX_ACCOUNTS[site_config.account_index]['name']}"
                        
                        print(f"  üéâ –ù–û–í–´–ï –°–õ–û–¢–´ –Ω–∞ –¥–∞—Ç—É {date}! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                    
                    # –°–ª—É—á–∞–π 2: –î–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    elif current_available and previous_available:
                        new_slots = set(current_slots) - set(previous_slots)
                        if new_slots:
                            should_notify = True
                            new_slots_text = ", ".join(list(new_slots)[:5])
                            if len(new_slots) > 5:
                                new_slots_text += "..."
                            
                            notification_text = (
                                f"‚ûï –î–û–ë–ê–í–ò–õ–ò–°–¨ –ù–û–í–´–ï –°–õ–û–¢–´!\n\n"
                                f"üè¢ {site_config.name}\n"
                                f"üìÖ –î–∞—Ç–∞: {date}\n"
                                f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {site_config.sport_type}\n"
                                f"üÜï –ù–æ–≤—ã–µ —Å–ª–æ—Ç—ã ({len(new_slots)}): {new_slots_text}\n"
                                f"üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(current_slots)}\n\n"
                                f"üîó {site_config.url}"
                            )
                            
                            if site_config.account_index is not None:
                                notification_text += f"\nüë§ –ê–∫–∫–∞—É–Ω—Ç: {WINBOX_ACCOUNTS[site_config.account_index]['name']}"
                            
                            print(f"  ‚ûï –î–û–ë–ê–í–ò–õ–ò–°–¨ —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É {date}! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
                    
                    # –°–ª—É—á–∞–π 3: –°–ª–æ—Ç—ã –∏—Å—á–µ–∑–ª–∏
                    elif not current_available and previous_available:
                        should_notify = True
                        notification_text = (
                            f"‚ùå –°–õ–û–¢–´ –ë–û–õ–¨–®–ï –ù–ï –î–û–°–¢–£–ü–ù–´\n\n"
                            f"üè¢ {site_config.name}\n"
                            f"üìÖ –î–∞—Ç–∞: {date}\n"
                            f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {site_config.sport_type}\n"
                            f"üí≠ –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–æ—Ç—ã –±—ã–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã"
                        )
                        
                        if site_config.account_index is not None:
                            notification_text += f"\nüë§ –ê–∫–∫–∞—É–Ω—Ç: {WINBOX_ACCOUNTS[site_config.account_index]['name']}"
                        
                        print(f"  ‚ùå –°–ª–æ—Ç—ã –∏—Å—á–µ–∑–ª–∏ –Ω–∞ –¥–∞—Ç—É {date}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if should_notify and notification_text:
                        await send_notification(notification_text)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    previous_states[site_date_key] = current_date_result
                    
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    if current_available:
                        logger.info(f"{site_config.name} {date}: {len(current_slots)} —Å–ª–æ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ")
                    else:
                        logger.info(f"{site_config.name} {date}: —Å–ª–æ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
                await asyncio.sleep(3)
            
            print(f"\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_EVERY} —Å–µ–∫—É–Ω–¥...")
            print(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {len(previous_states)}")
            await asyncio.sleep(CHECK_EVERY)
            
    except KeyboardInterrupt:
        print("\nüëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await send_notification("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await send_notification(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:\n{e}")

# ‚îÄ‚îÄ‚îÄ –¢–û–ß–ö–ê –í–•–û–î–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

if __name__ == "__main__":
    print("üéæ –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –ú–£–õ–¨–¢–ò–°–ü–û–†–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì –ò –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï v4.0")
    print("=" * 80)
    print("üî• –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò v4.0:")
    print("   üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ WinBox")
    print("   üïê –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–∞–∂–µ –±–µ–∑ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("   üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox –∏ Zona Padela")
    print("   ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–¥–µ–ª —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox")
    print("   üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–∞—Ö")
    print("   üîÑ –¢—Ä–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    print("   üìä –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    print("\nüìã –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö –ê–ö–ö–ê–£–ù–¢–û–í:")
    for i, account in enumerate(WINBOX_ACCOUNTS):
        status = "‚úÖ –ù–ê–°–¢–†–û–ï–ù" if account['email'] != "–≤—Ç–æ—Ä–æ–π_email@gmail.com" else "‚ùå –¢–†–ï–ë–£–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò"
        print(f"   {i+1}. {account['name']}: {account['email']} - {status}")
    
    if WINBOX_ACCOUNTS[1]['email'] == "–≤—Ç–æ—Ä–æ–π_email@gmail.com":
        print("\nüö® –í–ù–ò–ú–ê–ù–ò–ï: –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ WINBOX_ACCOUNTS[1] –≤ –∫–æ–¥–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üè¢ –°–∞–π—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(SITES)}")
    print(f"   üìÖ –î–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(SITES[0].dates) if SITES else 0}")
    print(f"   ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_EVERY} —Å–µ–∫—É–Ω–¥")
    print(f"   üîÑ –ü–æ–ø—ã—Ç–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {VERIFICATION_ATTEMPTS}")
    
    try:
        asyncio.run(monitor_sites())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")