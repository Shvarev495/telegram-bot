import asyncio
import re
import logging
from datetime import datetime
from playwright.async_api import (
    async_playwright,
    TimeoutError as PlaywrightTimeoutError,
)
from telegram import Bot
from dataclasses import dataclass
from typing import List, Optional, Dict
import json
import os

# ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log_filename = f'multi_sport_monitor_{datetime.now().strftime("%Y%m%d")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ –ü–ê–†–ê–ú–ï–¢–†–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TELEGRAM_TOKEN = "8195557403:AAGGWvI04F0jxswbDsk6gVQohz6KChBAho0"
CHAT_IDS = [
    "1599566837",
    "1422173650"
]

CHECK_EVERY = 1  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
VERIFICATION_ATTEMPTS = 3
SUCCESS_THRESHOLD = 2
ATTEMPT_DELAY = 2

# ü§ñ –ü–ê–†–ê–ú–ï–¢–†–´ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
AUTO_BOOKING_WINBOX = True  # –î–ª—è WinBox –ø–∞–¥–µ–ª
BOOK_FROM_LATE = True  # True = –ø–æ–∑–¥–Ω–∏–µ‚Üí—Ä–∞–Ω–Ω–∏–µ, False = —Ä–∞–Ω–Ω–∏–µ‚Üí–ø–æ–∑–¥–Ω–∏–µ
MAX_BOOKING_ATTEMPTS = 5
BOOKING_DELAY = 2

# üèÄ –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ü–ê–î–ï–õ
PADEL_SLOTS_TO_BOOK = 2
ZONA_SLOTS_TO_BOOK = 1  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# üîê –î–ê–ù–ù–´–ï –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò WINBOX - –î–í–ê –ê–ö–ö–ê–£–ù–¢–ê
WINBOX_ACCOUNTS = [
    {
        "email": "shvarev03@gmail.com",
        "password": "7538tuti",
        "name": "–ê–∫–∫–∞—É–Ω—Ç 1"
    },
    {
        "email": "shvarevftsha@mail.ru",
        "password": "Arl1kino",
        "name": "–ê–∫–∫–∞—É–Ω—Ç 2"
    }
]

# ‚è∞ –¢–ê–ô–ú–ê–£–¢–´
PAGE_LOAD_TIMEOUT = 60000
ELEMENT_WAIT_TIMEOUT = 45000
DEFAULT_WAIT = 3000

@dataclass
class SiteConfig:
    name: str
    url: str
    dates: List[str]
    month_tab: Optional[str] = None
    check_type: str = "slots"
    sport_type: str = "padel"
    slots_to_book: int = 1
    needs_auth: bool = False
    enable_booking: bool = False
    account_index: Optional[int] = None  # –ò–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

# üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ê–ô–¢–û–í - –ü–ê–î–ï–õ –° –î–í–£–ú–Ø –ê–ö–ö–ê–£–ù–¢–ê–ú–ò
SITES = [
    SiteConfig(
        name="Winbox –ü–∞–¥–µ–ª (–ê–∫–∫–∞—É–Ω—Ç 1)",
        url="https://winboxmsk.ru/schedule?types=padel",
        dates=["27", "28", "29", "30"],
        month_tab="–ê–í–ì–£–°–¢",
        check_type="slots",
        sport_type="padel",
        slots_to_book=PADEL_SLOTS_TO_BOOK,
        needs_auth=True,
        enable_booking=True,
        account_index=0  # –ü–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    ),
    SiteConfig(
        name="Winbox –ü–∞–¥–µ–ª (–ê–∫–∫–∞—É–Ω—Ç 2)",
        url="https://winboxmsk.ru/schedule?types=padel",
        dates=["27", "28", "29", "30"],
        month_tab="–ê–í–ì–£–°–¢",
        check_type="slots",
        sport_type="padel",
        slots_to_book=PADEL_SLOTS_TO_BOOK,
        needs_auth=True,
        enable_booking=True,
        account_index=1  # –í—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç
    ),
    SiteConfig(
        name="Zona Padela",
        url="https://n1594888.yclients.com/company/1434507/activity/select?orderStatus=successed&o=act2025-08-25",
        dates=["28", "29", "30", "31"],
        month_tab="–ê–≤–≥—É—Å—Ç",
        check_type="clickable",
        sport_type="padel", 
        slots_to_book=ZONA_SLOTS_TO_BOOK,
        needs_auth=False,
        enable_booking=False,
        account_index=None
    )
]

# ‚úÖ –°–¢–û–ü-–°–õ–û–í–ê –î–õ–Ø –í–ò–ù–ë–û–ö–°–ê (–ö–û–ì–î–ê –ù–ï –£–í–ï–î–û–ú–õ–Ø–¢–¨)
STOP_WORDS_WINBOX = [
    "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "win box –æ—Ç–¥—ã—Ö–∞–µ—Ç", 
    "winbox –æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "–æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–≤–µ—Ä–Ω—ë–º—Å—è —Å–∫–æ—Ä–æ",
    "–∑–∞–∫—Ä—ã—Ç–æ",
    "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
]

CRITICAL_STOP_WORDS_ZONA = [
    "–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
    "—Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", 
    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
    "—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
    "–∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
    "–Ω–µ—Ç –º–µ—Å—Ç"  # –î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ
]

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def login_to_winbox(page, account_index: int) -> bool:
    """üîê –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    if account_index >= len(WINBOX_ACCOUNTS):
        print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫–∫–∞—É–Ω—Ç–∞: {account_index}")
        return False
    
    account = WINBOX_ACCOUNTS[account_index]
    print(f"    üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox - {account['name']} ({account['email']})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ
        profile_indicators = [
            ':has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
            ':has-text("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")', 
            ':has-text("–í—ã–π—Ç–∏")',
            '[class*="profile"]',
            '[class*="user"]',
            ':has-text("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")'
        ]
        
        for indicator in profile_indicators:
            try:
                element = await page.query_selector(indicator)
                if element and await element.is_visible():
                    print(f"    ‚úÖ {account['name']} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    return True
            except:
                continue
        
        # –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º - –≤—ã—Ö–æ–¥–∏–º
        logout_selectors = [
            'button:has-text("–í—ã–π—Ç–∏")',
            'a:has-text("–í—ã–π—Ç–∏")',
            'button:has-text("–í–´–ô–¢–ò")',
            'a:has-text("–í–´–ô–¢–ò")',
            '[class*="logout"]'
        ]
        
        for selector in logout_selectors:
            try:
                logout_btn = await page.query_selector(selector)
                if logout_btn and await logout_btn.is_visible():
                    print("    üö™ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
                    await logout_btn.click()
                    await page.wait_for_timeout(3000)
                    break
            except:
                continue
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.wait_for_timeout(3000)
        
        # –ò—â–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫—É "–í–•–û–î"
        auth_triggers = [
            'button:has-text("–í–•–û–î")',
            'button:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'button:has-text("–í–æ–π—Ç–∏")',
            'a:has-text("–í–•–û–î")',
            'a:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'a:has-text("–í–æ–π—Ç–∏")',
            '[class*="auth"]',
            '[class*="login"]'
        ]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Ñ–æ—Ä–º—É
        email_field = None
        password_field = None
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è email
        email_selectors = [
            'input[type="email"]',
            'input[placeholder*="–ø–æ—á—Ç"]', 
            'input[placeholder*="email"]',
            'input[placeholder*="Email"]',
            'input[placeholder*="EMAIL"]',
            'input[name*="email"]',
            'input[id*="email"]',
            'input[autocomplete="email"]',
            'input[autocomplete="username"]'
        ]
        
        # –ò—â–µ–º –ø–æ–ª–µ email
        for selector in email_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    email_field = field
                    print("    üìß –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è email")
                    break
            except:
                continue
        
        # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not email_field:
            print("    üîç –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞...")
            
            for trigger_selector in auth_triggers:
                try:
                    triggers = await page.query_selector_all(trigger_selector)
                    for trigger in triggers:
                        if await trigger.is_visible():
                            trigger_text = await trigger.text_content()
                            print(f"    üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: '{trigger_text}'")
                            await trigger.click()
                            await page.wait_for_timeout(3000)
                            break
                    if email_field:
                        break
                except Exception as e:
                    continue
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—â–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã
            for selector in email_selectors:
                try:
                    field = await page.wait_for_selector(selector, timeout=10000)
                    if field and await field.is_visible():
                        email_field = field
                        print("    üìß –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è email –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã")
                        break
                except:
                    continue
        
        if not email_field:
            print("    ‚ùå –ü–æ–ª–µ –¥–ª—è email –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
        password_selectors = [
            'input[type="password"]',
            'input[placeholder*="–ø–∞—Ä–æ–ª—å"]',
            'input[placeholder*="–ü–∞—Ä–æ–ª—å"]',
            'input[name*="password"]',
            'input[id*="password"]',
            'input[autocomplete="current-password"]'
        ]
        
        # –ò—â–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        for selector in password_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    password_field = field
                    print("    üîë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è")
                    break
            except:
                continue
        
        if not password_field:
            print("    ‚ùå –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        print(f"    üìß –í–≤–æ–¥–∏–º email: {account['email']}")
        
        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ email
        await email_field.click()
        await page.wait_for_timeout(500)
        await email_field.evaluate('el => el.value = ""')
        await email_field.fill("")
        await page.wait_for_timeout(500)
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—á–∞—Ç–∞–µ–º email
        await email_field.type(account['email'], delay=150)
        await page.wait_for_timeout(1000)
        
        print("    üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å...")
        
        # –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è
        await password_field.click()
        await page.wait_for_timeout(500)
        await password_field.evaluate('el => el.value = ""')
        await password_field.fill("")
        await page.wait_for_timeout(500)
        
        # –ú–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—á–∞—Ç–∞–µ–º –ø–∞—Ä–æ–ª—å
        await password_field.type(account['password'], delay=150)
        await page.wait_for_timeout(1000)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        submit_selectors = [
            'button:has-text("–í–û–ô–¢–ò")',
            'button:has-text("–í–æ–π—Ç–∏")',
            'button:has-text("–í–•–û–î")',
            'button[type="submit"]',
            'input[type="submit"]',
            'form button'
        ]
        
        submit_button = None
        for selector in submit_selectors:
            try:
                buttons = await page.query_selector_all(selector)
                for button in buttons:
                    if await button.is_visible():
                        is_enabled = await button.evaluate('el => !el.disabled && !el.classList.contains("disabled")')
                        if is_enabled:
                            submit_button = button
                            button_text = await button.text_content()
                            print(f"    üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞: '{button_text.strip()}'")
                            break
                if submit_button:
                    break
            except:
                continue
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
        if submit_button:
            await submit_button.click()
            print("    üëÜ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞")
        else:
            print("    ‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º Enter")
            try:
                await password_field.press('Enter')
                print("    ‚å®Ô∏è –ù–∞–∂–∞–ª–∏ Enter –≤ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è")
            except:
                print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Enter")
                return False
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("    ‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        await page.wait_for_timeout(7000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success_indicators = [
            ':has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
            ':has-text("–ü—Ä–æ—Ñ–∏–ª—å")',
            ':has-text("–í—ã–π—Ç–∏")',
            ':has-text("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")',
            '[class*="profile"]',
            '[class*="logout"]'
        ]
        
        for indicator in success_indicators:
            try:
                success_element = await page.wait_for_selector(indicator, timeout=3000)
                if success_element and await success_element.is_visible():
                    success_text = await success_element.text_content()
                    print(f"    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {account['name']} —É—Å–ø–µ—à–Ω–∞! –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: '{success_text.strip()}'")
                    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox - {account['name']}")
                    return True
            except:
                continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        error_indicators = [
            ':has-text("–ù–µ–≤–µ—Ä–Ω—ã–π")',
            ':has-text("–û—à–∏–±–∫–∞")',
            ':has-text("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω")',
            '[class*="error"]'
        ]
        
        for indicator in error_indicators:
            try:
                error_element = await page.query_selector(indicator)
                if error_element and await error_element.is_visible():
                    error_text = await error_element.text_content()
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {account['name']}: {error_text.strip()}")
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox {account['name']}: {error_text}")
                    return False
            except:
                continue
        
        print(f"    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {account['name']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ)")
        return True
        
    except Exception as e:
        print(f"    ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {account['name']}: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox {account['name']}: {e}")
        return False

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def send_notification(text: str) -> None:
    """üì¨ –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¢–û–õ–¨–ö–û –æ —Å–ª–æ—Ç–∞—Ö –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"""
    bot = Bot(TELEGRAM_TOKEN)
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text)
            print(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {chat_id}")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {chat_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

def check_critical_stop_words(text: str, stop_words: List[str]) -> bool:
    """üõë –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤"""
    if not text:
        return False
    
    text_lower = text.lower()
    for stop_word in stop_words:
        if stop_word.lower() in text_lower:
            print(f"    üõë –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–¢–û–ü-–°–õ–û–í–û: '{stop_word}' –≤ —Ç–µ–∫—Å—Ç–µ")
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: {stop_word}")
            return True
    return False

def has_time_slots_in_text(text: str) -> bool:
    """üïê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)"""
    if not text:
        return False
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏: 10:00, 15:30, –∏ —Ç.–¥.
    time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
    time_matches = re.findall(time_pattern, text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ (00:00 - 23:59)
    valid_times = []
    for hour, minute in time_matches:
        hour_int = int(hour)
        minute_int = int(minute)
        if 0 <= hour_int <= 23 and 0 <= minute_int <= 59:
            valid_times.append(f"{hour}:{minute}")
    
    if valid_times:
        print(f"    üïê –ù–∞–π–¥–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: {', '.join(valid_times[:5])}")
        return True
    
    return False

def parse_time_slot(slot_text: str) -> tuple:
    """üïê –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ª–æ—Ç–∞"""
    try:
        time_match = re.search(r'(\d{1,2}):(\d{2})', slot_text)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2))
            return (hour, minute)
        return (0, 0)
    except:
        return (0, 0)

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø WINBOX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def close_modal_and_return(page):
    """‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        close_selectors = [
            'button[aria-label="Close"]',
            'button[class*="close"]',
            'button:has-text("‚úï")',
            'button:has-text("√ó")',
            'button:has-text("X")',
            'button:has-text("–ó–∞–∫—Ä—ã—Ç—å")',
            'button:has-text("–û—Ç–º–µ–Ω–∞")',
            '.modal-close',
            '[data-dismiss="modal"]'
        ]
        
        for selector in close_selectors:
            try:
                close_button = await page.query_selector(selector)
                if close_button and await close_button.is_visible():
                    await close_button.click()
                    print("        ‚úÖ –ó–∞–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ")
                    await page.wait_for_timeout(1000)
                    return True
            except:
                continue
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞–∂–∞—Ç–∏–µ–º Escape
        try:
            await page.keyboard.press('Escape')
            print("        ‚úÖ –ó–∞–∫—Ä—ã–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ Escape")
            await page.wait_for_timeout(1000)
            return True
        except:
            pass
            
        return False
    except Exception as e:
        print(f"        ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False

async def reload_and_reselect_date(page, config: SiteConfig, date: str):
    """üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∞—Ç—É"""
    print("        üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É...")
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await page.goto(config.url, wait_until="networkidle")
        await page.wait_for_timeout(2000)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü
        if config.month_tab:
            try:
                await page.wait_for_selector(f"text={config.month_tab}", timeout=ELEMENT_WAIT_TIMEOUT)
                await page.click(f"text={config.month_tab}")
                await page.wait_for_timeout(DEFAULT_WAIT)
                print(f"          ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ {config.month_tab}")
            except PlaywrightTimeoutError:
                print(f"          ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Å—è—Ü {config.month_tab}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ
        date_selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'*:has-text("{date}")',
            f'[data-date="{date}"]',
            f'[data-day="{date}"]',
            f'td:has-text("{date}")',
            f'span:has-text("{date}")'
        ]
        
        date_element = None
        for selector in date_selectors:
            try:
                elements = await page.query_selector_all(selector)
                for element in elements:
                    text_content = await element.text_content()
                    if text_content and text_content.strip() == date:
                        is_clickable = await element.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                const rect = el.getBoundingClientRect();
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       rect.width > 0 && rect.height > 0;
                            }
                        ''')
                        if is_clickable:
                            date_element = element
                            break
                if date_element:
                    break
            except:
                continue
        
        if date_element:
            await date_element.click()
            await page.wait_for_timeout(DEFAULT_WAIT)
            print(f"          ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É {date}")
            return True
        else:
            print(f"          ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É {date}")
            return False
            
    except Exception as e:
        print(f"          ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã: {e}")
        return False

async def find_clickable_time_slots(page, date: str) -> List[dict]:
    """üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"""
    print(f"        üîç –ò—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã {date}...")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await page.wait_for_timeout(2000)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        time_slot_selectors = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            'div:has-text(":")',
            'button:has-text(":")',
            'span:has-text(":")',
            '[class*="time"]:has-text(":")',
            '[class*="slot"]:has-text(":")',
            '[class*="schedule"]:has-text(":")',
            '[class*="court"]:has-text(":")',
            
            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            '[class*="time-slot"]',
            '[class*="schedule-item"]',
            '[class*="booking-slot"]',
            '[class*="court-time"]',
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            'div[role="button"]:has-text(":")',
            'a:has-text(":")',
            '*[onclick*="time"]:has-text(":")',
            '*[data-time]',
            '*[data-slot]',
        ]
        
        all_slots = []
        
        for selector in time_slot_selectors:
            try:
                elements = await page.query_selector_all(selector)
                
                for element in elements:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
                        element_text = await element.text_content()
                        if not element_text:
                            continue
                            
                        element_text = element_text.strip()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è)
                        time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
                        time_matches = re.findall(time_pattern, element_text)
                        
                        if not time_matches:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞
                        is_available = await element.evaluate('''
                            el => {
                                const rect = el.getBoundingClientRect();
                                const style = getComputedStyle(el);
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
                                if (rect.width <= 0 || rect.height <= 0) return false;
                                if (style.display === 'none' || style.visibility === 'hidden') return false;
                                if (parseFloat(style.opacity) < 0.1) return false;
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                                if (el.disabled) return false;
                                if (style.pointerEvents === 'none') return false;
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                                const classList = el.classList;
                                const unavailableClasses = [
                                    'disabled', 'booked', 'unavailable', 'occupied', 
                                    'reserved', 'blocked', 'inactive', 'past'
                                ];
                                
                                for (const cls of unavailableClasses) {
                                    if (classList.contains(cls)) return false;
                                }
                                
                                return true;
                            }
                        ''')
                        
                        if not is_available:
                            continue
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        is_clickable = await element.evaluate('''
                            el => {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                                const hasClickHandler = el.onclick !== null || 
                                                      el.addEventListener !== undefined ||
                                                      el.getAttribute('onclick') !== null ||
                                                      el.getAttribute('href') !== null;
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                const tagName = el.tagName.toLowerCase();
                                const isClickableTag = ['button', 'a', 'input'].includes(tagName);
                                
                                const role = el.getAttribute('role');
                                const isClickableRole = role === 'button' || role === 'link';
                                
                                const cursor = getComputedStyle(el).cursor;
                                const hasPointerCursor = cursor === 'pointer';
                                
                                return hasClickHandler || isClickableTag || isClickableRole || hasPointerCursor;
                            }
                        ''')
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
                        # (–∏–Ω–æ–≥–¥–∞ –Ω–∞ —Å–∞–π—Ç–∞—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
                        slot_info = {
                            'element': element,
                            'text': element_text,
                            'is_clickable': is_clickable,
                            'selector_used': selector
                        }
                        
                        all_slots.append(slot_info)
                        
                        print(f"          ‚úÖ –ù–∞–π–¥–µ–Ω —Å–ª–æ—Ç: '{element_text}' (–∫–ª–∏–∫–∞–±–µ–ª–µ–Ω: {is_clickable}, —Å–µ–ª–µ–∫—Ç–æ—Ä: {selector})")
                        
                    except Exception as e:
                        continue
                        
            except Exception as e:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É
        unique_slots = {}
        for slot in all_slots:
            text = slot['text']
            if text not in unique_slots or slot['is_clickable']:
                unique_slots[text] = slot
        
        final_slots = list(unique_slots.values())
        
        print(f"        üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(final_slots)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        def extract_first_time(slot_info):
            text = slot_info['text']
            time_match = re.search(r'(\d{1,2}):(\d{2})', text)
            if time_match:
                return (int(time_match.group(1)), int(time_match.group(2)))
            return (0, 0)
        
        final_slots.sort(key=extract_first_time)
        
        return final_slots
        
    except Exception as e:
        print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤: {e}")
        return []

async def try_click_slot_multiple_ways(page, slot_info: dict) -> bool:
    """üéØ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï —Å–ø–æ—Å–æ–±—ã –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—Ç—É"""
    element = slot_info['element']
    text = slot_info['text']
    
    print(f"            üéØ –ü—ã—Ç–∞–µ–º—Å—è –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–ª–æ—Ç—É: '{text}'")
    
    # –°–ø–æ—Å–æ–± 1: –û–±—ã—á–Ω—ã–π –∫–ª–∏–∫
    try:
        await element.click()
        await page.wait_for_timeout(1000)
        print(f"            ‚úÖ –°–ø–æ—Å–æ–± 1 (–æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –°–ø–æ—Å–æ–± 2: –ö–ª–∏–∫ —Å force
    try:
        await element.click(force=True)
        await page.wait_for_timeout(1000)
        print(f"            ‚úÖ –°–ø–æ—Å–æ–± 2 (force –∫–ª–∏–∫) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –°–ø–æ—Å–æ–± 3: –§–æ–∫—É—Å + Enter
    try:
        await element.focus()
        await page.keyboard.press('Enter')
        await page.wait_for_timeout(1000)
        print(f"            ‚úÖ –°–ø–æ—Å–æ–± 3 (—Ñ–æ–∫—É—Å + Enter) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –°–ø–æ—Å–æ–± 4: JavaScript –∫–ª–∏–∫
    try:
        await element.evaluate('el => el.click()')
        await page.wait_for_timeout(1000)
        print(f"            ‚úÖ –°–ø–æ—Å–æ–± 4 (JavaScript –∫–ª–∏–∫) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 4 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –°–ø–æ—Å–æ–± 5: –≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    try:
        await element.evaluate('''
            el => {
                const event = new MouseEvent('click', {
                    bubbles: true,
                    cancelable: true,
                    view: window
                });
                el.dispatchEvent(event);
            }
        ''')
        await page.wait_for_timeout(1000)
        print(f"            ‚úÖ –°–ø–æ—Å–æ–± 5 (—ç–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏–π) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 5 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    # –°–ø–æ—Å–æ–± 6: –ü–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    try:
        parent_clickable = await element.evaluate('''
            el => {
                let current = el;
                while (current && current !== document.body) {
                    if (current.onclick || current.getAttribute('onclick') || 
                        current.tagName.toLowerCase() === 'button' ||
                        current.tagName.toLowerCase() === 'a') {
                        return current;
                    }
                    current = current.parentElement;
                }
                return null;
            }
        ''')
        
        if parent_clickable:
            await page.evaluate('el => el.click()', parent_clickable)
            await page.wait_for_timeout(1000)
            print(f"            ‚úÖ –°–ø–æ—Å–æ–± 6 (–∫–ª–∏–∫ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—é) - –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return True
    except Exception as e:
        print(f"            ‚ùå –°–ø–æ—Å–æ–± 6 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
    
    print(f"            ‚ùå –í–°–ï –°–ü–û–°–û–ë–´ –ö–õ–ò–ö–ê –ù–ï –°–†–ê–ë–û–¢–ê–õ–ò –¥–ª—è —Å–ª–æ—Ç–∞: '{text}'")
    return False

async def wait_for_booking_modal(page) -> bool:
    """‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"            ‚è≥ –û–∂–∏–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    modal_selectors = [
        '[class*="modal"]',
        '[class*="popup"]',
        '[class*="dialog"]',
        '[class*="booking"]',
        '[role="dialog"]',
        '.overlay',
        '[class*="overlay"]'
    ]
    
    try:
        for selector in modal_selectors:
            try:
                modal = await page.wait_for_selector(selector, timeout=3000)
                if modal:
                    is_visible = await modal.evaluate('el => el.offsetHeight > 0 && el.offsetWidth > 0')
                    if is_visible:
                        print(f"            ‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ: {selector}")
                        return True
            except:
                continue
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ URL –∏–ª–∏ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await page.wait_for_timeout(2000)
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_button_selectors = [
            'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
            'button:has-text("–ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨")',
            'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
            'button:has-text("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")',
            'button[class*="book"]',
            'button[class*="confirm"]'
        ]
        
        for selector in booking_button_selectors:
            try:
                button = await page.query_selector(selector)
                if button and await button.is_visible():
                    print(f"            ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {selector}")
                    return True
            except:
                continue
        
        print(f"            ‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
        
    except Exception as e:
        print(f"            ‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")
        return False

async def try_book_winbox_slot_improved(page, slot_info: dict, config: SiteConfig) -> bool:
    """üéØ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç"""
    text = slot_info['text']
    
    try:
        print(f"            üéØ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–õ–û–¢–ê: '{text}'")
        
        # –®–∞–≥ 1: –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–ª–æ—Ç—É —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        click_success = await try_click_slot_multiple_ways(page, slot_info)
        
        if not click_success:
            print(f"            ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–ª–æ—Ç—É: '{text}'")
            return False
        
        # –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        modal_appeared = await wait_for_booking_modal(page)
        
        if not modal_appeared:
            print(f"            ‚ö†Ô∏è –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –®–∞–≥ 3: –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        book_button_selectors = [
            'button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
            'button:has-text("–ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨")',
            'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
            'button:has-text("–ü–û–î–¢–í–ï–†–î–ò–¢–¨")',
            'button:has-text("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")',
            'button:has-text("–ó–ê–ü–ò–°–ê–¢–¨–°–Ø")',
            'button:has-text("–û–ø–ª–∞—Ç–∏—Ç—å")',
            'button:has-text("–û–ü–õ–ê–¢–ò–¢–¨")',
            'button[class*="book"]',
            'button[class*="confirm"]',
            'button[class*="submit"]',
            'input[type="submit"]',
            'button[type="submit"]',
            'form button',
            '.btn:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")',
            '.button:has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")'
        ]
        
        book_button = None
        book_button_text = ""
        
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        for selector in book_button_selectors:
            try:
                buttons = await page.query_selector_all(selector)
                for button in buttons:
                    if await button.is_visible():
                        is_enabled = await button.evaluate('''
                            el => !el.disabled && 
                                  !el.classList.contains("disabled") &&
                                  getComputedStyle(el).pointerEvents !== "none"
                        ''')
                        if is_enabled:
                            book_button = button
                            book_button_text = await button.text_content()
                            print(f"            üëÜ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: '{book_button_text.strip()}'")
                            break
                if book_button:
                    break
            except:
                continue
        
        if not book_button:
            print(f"            ‚ùå –ö–Ω–æ–ø–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–ª–æ—Ç–∞: '{text}'")
            return False
        
        # –®–∞–≥ 4: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await book_button.click()
            print(f"            üëÜ –ù–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: '{book_button_text.strip()}'")
        except:
            # –ü—ã—Ç–∞–µ–º—Å—è JavaScript –∫–ª–∏–∫
            await book_button.evaluate('el => el.click()')
            print(f"            üëÜ JavaScript –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: '{book_button_text.strip()}'")
        
        # –®–∞–≥ 5: –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await page.wait_for_timeout(5000)
        
        # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        success_indicators = [
            ':has-text("—É—Å–ø–µ—à–Ω–æ")',
            ':has-text("–£—Å–ø–µ—à–Ω–æ")',
            ':has-text("–£–°–ü–ï–®–ù–û")',
            ':has-text("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")',
            ':has-text("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")',
            ':has-text("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")',
            ':has-text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")',
            ':has-text("–∑–∞–ø–∏—Å–∞–Ω")',
            ':has-text("–ó–∞–ø–∏—Å–∞–Ω")',
            ':has-text("–æ–ø–ª–∞—á–µ–Ω–æ")',
            ':has-text("–û–ø–ª–∞—á–µ–Ω–æ")',
            '[class*="success"]',
            '[class*="confirmed"]',
            '[class*="booked"]'
        ]
        
        for indicator in success_indicators:
            try:
                success_element = await page.wait_for_selector(indicator, timeout=3000)
                if success_element and await success_element.is_visible():
                    success_text = await success_element.text_content()
                    print(f"            üéâ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û! –°–ª–æ—Ç: '{text}' - {success_text.strip()}")
                    logger.info(f"–£–°–ü–ï–®–ù–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï {config.sport_type}: {text} - {success_text}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –£–°–ü–ï–®–ù–û–ú –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ò
                    booking_notification = (
                        f"üéâ –°–õ–û–¢ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù!\n\n"
                        f"üè¢ {config.name}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {text}\n"
                        f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {config.sport_type}\n"
                        f"‚úÖ –°—Ç–∞—Ç—É—Å: {success_text.strip()}"
                    )
                    await send_notification(booking_notification)
                    
                    return True
            except:
                continue
        
        # –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        error_indicators = [
            ':has-text("–æ—à–∏–±–∫–∞")',
            ':has-text("–û—à–∏–±–∫–∞")',
            ':has-text("–û–®–ò–ë–ö–ê")',
            ':has-text("–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")',
            ':has-text("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")',
            ':has-text("–∑–∞–Ω—è—Ç–æ")',
            ':has-text("–ó–∞–Ω—è—Ç–æ")',
            ':has-text("–Ω–µ —É–¥–∞–ª–æ—Å—å")',
            ':has-text("–Ω–µ—É–¥–∞—á–Ω–æ")',
            '[class*="error"]',
            '[class*="failed"]'
        ]
        
        for indicator in error_indicators:
            try:
                error_element = await page.query_selector(indicator)
                if error_element and await error_element.is_visible():
                    error_text = await error_element.text_content()
                    print(f"            ‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {error_text.strip()}")
                    return False
            except:
                continue
        
        # –ï—Å–ª–∏ —è–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        print(f"            ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω–æ)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        booking_notification = (
            f"‚úÖ –°–õ–û–¢ –í–û–ó–ú–û–ñ–ù–û –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù\n\n"
            f"üè¢ {config.name}\n"
            f"‚è∞ –í—Ä–µ–º—è: {text}\n"
            f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {config.sport_type}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)"
        )
        await send_notification(booking_notification)
        
        return True
        
    except Exception as e:
        print(f"            ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞ '{text}': {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {config.sport_type} '{text}': {e}")
        return False

async def book_winbox_slots_improved(page, date: str, config: SiteConfig) -> List[str]:
    """ü§ñ –£–õ–£–ß–®–ï–ù–ù–û–ï –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox"""
    if not config.enable_booking:
        print(f"        üìµ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è {config.name}")
        return []
    
    print(f"        ü§ñ –£–õ–£–ß–®–ï–ù–ù–û–ï –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {config.sport_type} –¥–ª—è –¥–∞—Ç—ã {date}...")
    print(f"        üéØ –¶–µ–ª—å: –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å {config.slots_to_book} —Å–ª–æ—Ç(–æ–≤)")
    
    booked_slots = []
    booking_attempts = 0
    successful_bookings = 0
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        while successful_bookings < config.slots_to_book and booking_attempts < MAX_BOOKING_ATTEMPTS:
            print(f"        üîÑ –ü–æ–ø—ã—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {booking_attempts + 1}/{MAX_BOOKING_ATTEMPTS}")
            
            # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
            available_slots = await find_clickable_time_slots(page, date)
            
            if not available_slots:
                print(f"        ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                break
            
            print(f"        üìÖ –ù–∞–π–¥–µ–Ω–æ {len(available_slots)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            def extract_first_time(slot_info):
                text = slot_info['text']
                time_match = re.search(r'(\d{1,2}):(\d{2})', text)
                if time_match:
                    return (int(time_match.group(1)), int(time_match.group(2)))
                return (0, 0)
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –ø–æ–∑–¥–Ω–∏—Ö –∫ —Ä–∞–Ω–Ω–∏–º –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
            if BOOK_FROM_LATE:
                available_slots.sort(key=extract_first_time, reverse=True)
                print(f"        ‚è∞ –ü–æ—Ä—è–¥–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç –ø–æ–∑–¥–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –∫ —Ä–∞–Ω–Ω–∏–º")
            else:
                available_slots.sort(key=extract_first_time)
                print(f"        ‚è∞ –ü–æ—Ä—è–¥–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç —Ä–∞–Ω–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –∫ –ø–æ–∑–¥–Ω–∏–º")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
            slot_booked = False
            for slot_info in available_slots:
                if await try_book_winbox_slot_improved(page, slot_info, config):
                    booked_slots.append(slot_info['text'])
                    successful_bookings += 1
                    slot_booked = True
                    print(f"        üéâ –£–°–ü–ï–®–ù–û –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å–ª–æ—Ç {successful_bookings}/{config.slots_to_book}: {slot_info['text']}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    await close_modal_and_return(page)
                    
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    if successful_bookings < config.slots_to_book:
                        print(f"        üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
                        await reload_and_reselect_date(page, config, date)
                    
                    break
                else:
                    print(f"        ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç: {slot_info['text']}")
                    await close_modal_and_return(page)
            
            booking_attempts += 1
            
            if not slot_booked:
                print(f"        ‚ùå –í –ø–æ–ø—ã—Ç–∫–µ {booking_attempts} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞")
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await page.wait_for_timeout(3000)
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –≤—ã—Ö–æ–¥–∏–º
            if successful_bookings >= config.slots_to_book:
                print(f"        üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –£—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ {successful_bookings} —Å–ª–æ—Ç–æ–≤")
                break
        
        if successful_bookings > 0:
            print(f"        ‚úÖ –ò–¢–û–ì–û –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ {successful_bookings} —Å–ª–æ—Ç–æ–≤: {', '.join(booked_slots)}")
        else:
            print(f"        ‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞")
        
        return booked_slots
        
    except Exception as e:
        print(f"        ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {config.sport_type}: {e}")
        return booked_slots

# ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ZONA PADELA ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def determine_slot_availability(text: str, container) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
    text_lower = text.lower()
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º "–û—Å—Ç–∞–ª–æ—Å—å X –º–µ—Å—Ç" –ü–ï–†–í–´–ú
    remains_patterns = [
        r'–æ—Å—Ç–∞–ª–æ—Å—å\s+(\d+)\s+–º–µ—Å—Ç[–æ–∞]?',
        r'–æ—Å—Ç–∞–ª–æ—Å—å\s+(\d+)',
        r'–æ—Å—Ç–∞–µ—Ç—Å—è\s+(\d+)\s+–º–µ—Å—Ç[–æ–∞]?',
    ]
    
    for pattern in remains_patterns:
        remains_match = re.search(pattern, text_lower)
        if remains_match:
            places_count = int(remains_match.group(1))
            print(f"          üéØ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß–ï–í–û–ô –ò–ù–î–ò–ö–ê–¢–û–†: '–û—Å—Ç–∞–ª–æ—Å—å {places_count} –º–µ—Å—Ç–æ/–º–µ—Å—Ç'")
            return "available" if places_count > 0 else "unavailable"
    
    # ‚úÖ –Ø–í–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –ù–ï–î–û–°–¢–£–ü–ù–û–°–¢–ò (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    unavailable_indicators = [
        '–Ω–µ—Ç –º–µ—Å—Ç',
        '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        '–∑–∞–Ω—è—Ç–æ',
        '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
        '–∑–∞–∫—Ä—ã—Ç–æ',
        '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ',
        '–ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç–æ',
        '–º–µ—Å—Ç: 0',
        '–æ—Å—Ç–∞–ª–æ—Å—å: 0',
        '—Å–≤–æ–±–æ–¥–Ω–æ: 0',
        '–º–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
        '–∑–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'
    ]
    
    for indicator in unavailable_indicators:
        if indicator in text_lower:
            print(f"          ‚ùå –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: '{indicator}'")
            return "unavailable"
    
    # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –î–†–£–ì–ò–ï –ü–ê–¢–¢–ï–†–ù–´ –ö–û–õ–ò–ß–ï–°–¢–í–ê –î–û–°–¢–£–ü–ù–´–• –ú–ï–°–¢
    places_patterns = [
        r'(\d+)\s*—Å–≤–æ–±–æ–¥–Ω',
        r'(\d+)\s*–¥–æ—Å—Ç—É–ø–Ω',
        r'—Å–≤–æ–±–æ–¥–Ω–æ:\s*(\d+)',
        r'–º–µ—Å—Ç:\s*(\d+)',
        r'–¥–æ—Å—Ç—É–ø–Ω–æ\s*(\d+)',
        r'(\d+)\s*–º–µ—Å—Ç.*–¥–æ—Å—Ç—É–ø–Ω',
    ]
    
    for pattern in places_patterns:
        places_match = re.search(pattern, text_lower)
        if places_match:
            places_count = int(places_match.group(1))
            print(f"          üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {places_count}")
            return "available" if places_count > 0 else "unavailable"
    
    # ‚úÖ –Ø–í–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ –î–û–°–¢–£–ü–ù–û–°–¢–ò
    available_indicators = [
        '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å',
        '–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è',
        '–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏',
        '—Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞',
        '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–µ—Å—Ç—å –º–µ—Å—Ç–∞',
        '–∞—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç–∞'
    ]
    
    for indicator in available_indicators:
        if indicator in text_lower:
            print(f"          ‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: '{indicator}'")
            return "available"
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    print(f"          ‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ù–ï–î–û–°–¢–£–ü–ï–ù")
    return "unavailable"

async def analyze_available_slots(page, date: str) -> List[str]:
    """üîç –£–õ–£–ß–®–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –Ω–∞ Zona Padela —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π "–û—Å—Ç–∞–ª–æ—Å—å 1-8 –º–µ—Å—Ç"""
    print(f"      üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date}...")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã {date}")
    
    try:
        # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        page_text = await page.evaluate('() => document.body.innerText')
        
        # ‚úÖ –ü–ï–†–í–ò–ß–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        date_specific_stops = [
            f"{date} –∞–≤–≥—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"{date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"–Ω–∞ {date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"{date}.08 - –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
        ]
        
        all_critical_stops = CRITICAL_STOP_WORDS_ZONA + date_specific_stops
        
        if check_critical_stop_words(page_text, all_critical_stops):
            print(f"      ‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –¥–∞—Ç—ã {date}")
            return []
        
        # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "–û—Å—Ç–∞–ª–æ—Å—å X –º–µ—Å—Ç" –≥–¥–µ X –æ—Ç 1 –¥–æ 8
        available_slots = []
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–û—Å—Ç–∞–ª–æ—Å—å X –º–µ—Å—Ç" —Å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 8
        remains_pattern = r'–æ—Å—Ç–∞–ª–æ—Å—å\s+([1-8])\s+–º–µ—Å—Ç[–æ–∞]?'
        remains_matches = re.finditer(remains_pattern, page_text.lower())
        
        print(f"      üîç –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω '–û—Å—Ç–∞–ª–æ—Å—å 1-8 –º–µ—Å—Ç' –≤ —Ç–µ–∫—Å—Ç–µ...")
        
        for match in remains_matches:
            places_count = int(match.group(1))
            # –ò—â–µ–º –≤—Ä–µ–º—è —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º
            context_start = max(0, match.start() - 100)
            context_end = min(len(page_text), match.end() + 100)
            context = page_text[context_start:context_end]
            
            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            time_matches = re.findall(r'(\d{1,2}:\d{2})', context)
            
            for time_text in time_matches:
                if time_text not in available_slots:
                    available_slots.append(time_text)
                    print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç: {time_text} (–æ—Å—Ç–∞–ª–æ—Å—å {places_count} –º–µ—Å—Ç)")
        
        # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å "–æ—Å—Ç–∞–ª–æ—Å—å"
        try:
            remains_elements = await page.query_selector_all('*:has-text("–æ—Å—Ç–∞–ª–æ—Å—å")')
            
            for element in remains_elements:
                try:
                    element_text = await element.text_content()
                    if element_text and '–æ—Å—Ç–∞–ª–æ—Å—å' in element_text.lower():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 8
                        number_match = re.search(r'–æ—Å—Ç–∞–ª–æ—Å—å\s+([1-8])\s+–º–µ—Å—Ç?', element_text.lower())
                        if number_match:
                            places_count = int(number_match.group(1))
                            
                            # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                            time_match = re.search(r'(\d{1,2}:\d{2})', element_text)
                            if time_match:
                                time_text = time_match.group(1)
                                if time_text not in available_slots:
                                    available_slots.append(time_text)
                                    print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞: {time_text} (–æ—Å—Ç–∞–ª–æ—Å—å {places_count} –º–µ—Å—Ç)")
                except:
                    continue
        except:
            print("      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å '–æ—Å—Ç–∞–ª–æ—Å—å'")
        
        if available_slots:
            print(f"      üéâ –ù–ê–ô–î–ï–ù–´ –î–û–°–¢–£–ü–ù–´–ï –°–õ–û–¢–´ —Å –º–µ—Å—Ç–∞–º–∏ –æ—Ç 1 –¥–æ 8:")
            for slot in available_slots:
                print(f"        ‚úÖ {slot}")
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç Zona Padela: {slot}")
        else:
            print(f"      ‚ùå –ù–ï–¢ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å 1-8 –º–µ—Å—Ç–∞–º–∏ –¥–ª—è –¥–∞—Ç—ã {date}")
        
        return available_slots
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ—Ç–æ–≤: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ—Ç–æ–≤ –¥–ª—è {date}: {e}")
        return []

async def check_zona_padela_date_single(page, date: str, config: SiteConfig) -> List[str]:
    """üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞ Zona Padela —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    print(f"    üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date}...")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date} –Ω–∞ Zona Padela")

    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto(config.url, wait_until="domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
        await page.wait_for_timeout(DEFAULT_WAIT * 2)

        # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–≤–≥—É—Å—Ç)
        if config.month_tab:
            month_found = False
            selectors = [
                f'button:has-text("{config.month_tab}")',
                f'div:has-text("{config.month_tab}")',
                f'span:has-text("{config.month_tab}")',
            ]
            for selector in selectors:
                try:
                    elem = await page.query_selector(selector)
                    if elem:
                        await elem.click()
                        await page.wait_for_timeout(DEFAULT_WAIT)
                        print(f"      ‚úÖ –ö–ª–∏–∫ –ø–æ –º–µ—Å—è—Ü—É {config.month_tab}")
                        month_found = True
                        break
                except Exception:
                    continue

        # –°–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –¥–Ω—è
        calendar_selectors = [
            f'td:has-text("{date}"):not([class*="other-month"]):not([class*="disabled"])',
            f'button:has-text("{date}"):not([disabled])',
            f'div:has-text("{date}"):not([class*="disabled"])',
            f'span:has-text("{date}"):not([class*="disabled"])'
        ]

        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–Ω—è. –û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä—ã–π/disabled).
        target_elem = None
        for selector in calendar_selectors:
            elems = await page.query_selector_all(selector)
            for el in elems:
                try:
                    text = (await el.text_content() or '').strip()
                    is_disabled = await el.get_attribute('disabled')
                    class_attr = await el.get_attribute('class') or ''
                    if text == str(int(date)):  # –¥–ª—è 08 ‚Üí 8
                        if not is_disabled and "disabled" not in class_attr:
                            target_elem = el
                            break
                except Exception:
                    continue
            if target_elem:
                break

        if not target_elem:
            print(f"      ‚ùå –î–∞—Ç–∞ {date}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞")
            return []

        await target_elem.click()
        print(f"      ‚úÖ –ö–ª–∏–∫ –ø–æ –¥–∞—Ç–µ {date} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        await page.wait_for_timeout(DEFAULT_WAIT * 2)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        return await analyze_available_slots(page, date)

    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã {date}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
        return []

# ‚îÄ‚îÄ‚îÄ –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò WINBOX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def check_winbox_date_single_improved(page, date: str, config: SiteConfig) -> Dict:
    """üìÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –Ω–∞ WinBox —Å –Ω–æ–≤—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"    üìÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã {date} –¥–ª—è {config.sport_type} ({config.name})...")
    
    try:
        # –ò—â–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –¥–∞—Ç–µ
        date_selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'*:has-text("{date}")',
            f'[data-date="{date}"]',
            f'[data-day="{date}"]',
            f'td:has-text("{date}")',
            f'span:has-text("{date}")'
        ]
        
        date_element = None
        for selector in date_selectors:
            try:
                elements = await page.query_selector_all(selector)
                for element in elements:
                    text_content = await element.text_content()
                    if text_content and text_content.strip() == date:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞
                        is_clickable = await element.evaluate('''
                            el => {
                                const style = getComputedStyle(el);
                                const rect = el.getBoundingClientRect();
                                return !el.disabled && 
                                       style.pointerEvents !== "none" && 
                                       rect.width > 0 && rect.height > 0;
                            }
                        ''')
                        if is_clickable:
                            date_element = element
                            break
                if date_element:
                    break
            except:
                continue
        
        if not date_element:
            print(f"      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞ {date}")
            return {"status": "date_not_found", "message": f"–î–∞—Ç–∞ {date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        await date_element.click()
        await page.wait_for_timeout(DEFAULT_WAIT)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            page_text = await page.evaluate('() => document.body.innerText')
            print(f"      üìÑ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–∞—Ç—ã {date}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤
            has_time_slots = has_time_slots_in_text(page_text)
            has_stop_words = check_critical_stop_words(page_text, STOP_WORDS_WINBOX)
            
            print(f"      üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {'–î–ê' if has_time_slots else '–ù–ï–¢'}")
            print(f"      üõë –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω—ã: {'–î–ê' if has_stop_words else '–ù–ï–¢'}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã - –∏—â–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if has_time_slots:
                available_slots_info = await find_clickable_time_slots(page, date)
                
                if available_slots_info:
                    print(f"      ‚úÖ –î–∞—Ç–∞ {date}: –Ω–∞–π–¥–µ–Ω–æ {len(available_slots_info)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    booked_slots = []
                    if config.enable_booking:
                        booked_slots = await book_winbox_slots_improved(page, date, config)
                        if booked_slots:
                            print(f"      üéâ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã {config.sport_type} —Å–ª–æ—Ç—ã: {', '.join(booked_slots)}")
                            logger.info(f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã {config.sport_type} —Å–ª–æ—Ç—ã {date}: {', '.join(booked_slots)}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    slot_texts = [slot_info['text'] for slot_info in available_slots_info]
                    
                    return {
                        "status": "available",
                        "slots": slot_texts,
                        "booked_slots": booked_slots,
                        "message": f"–î–æ—Å—Ç—É–ø–Ω–æ {len(available_slots_info)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤",
                        "has_stop_words": has_stop_words
                    }
                else:
                    # –ï—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ, –Ω–æ –Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    time_pattern = r'\b([0-2]?[0-9]):([0-5][0-9])\b'
                    time_matches = re.findall(time_pattern, page_text)
                    found_times = []
                    
                    for hour, minute in time_matches:
                        hour_int = int(hour)
                        minute_int = int(minute)
                        if 0 <= hour_int <= 23 and 0 <= minute_int <= 59:
                            found_times.append(f"{hour}:{minute}")
                    
                    unique_times = list(set(found_times))
                    unique_times.sort()
                    
                    return {
                        "status": "time_slots_detected",
                        "slots": unique_times,
                        "message": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ ({len(unique_times)} —à—Ç.), –Ω–æ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã",
                        "has_stop_words": has_stop_words
                    }
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            if has_stop_words:
                return {
                    "status": "no_slots",
                    "message": "–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç",
                    "has_stop_words": True
                }
            else:
                return {
                    "status": "no_time_detected",
                    "message": "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã",
                    "has_stop_words": False
                }
            
        except Exception as e:
            print(f"      ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        
        print(f"      ‚ö†Ô∏è –î–∞—Ç–∞ {date}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–æ–≤")
        return {"status": "unknown", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å"}
        
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ WinBox {date}: {e}")
        return {"status": "error", "message": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"}

# ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –¢–†–û–ô–ù–û–ô –ü–†–û–í–ï–†–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def verify_date_multiple_times(page, date: str, config: SiteConfig) -> List[str]:
    """üîÑ –¢–†–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–∞—Ç—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print(f"  üîÑ –¢–†–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –¥–∞—Ç—ã {date} –¥–ª—è {config.sport_type} ({VERIFICATION_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫)...")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–æ–π–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã {date} {config.sport_type}")
    
    all_found_slots = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    successful_checks = 0
    time_slots_detected = False  # –§–ª–∞–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    
    for attempt in range(1, VERIFICATION_ATTEMPTS + 1):
        print(f"    üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{VERIFICATION_ATTEMPTS} –¥–ª—è –¥–∞—Ç—ã {date}...")
        
        try:
            if config.check_type == "slots":
                # –î–ª—è WinBox - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                result = await check_winbox_date_single_improved(page, date, config)
                status = result.get("status")
                
                # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
                if status == "available":
                    successful_checks += 1
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–û {len(slots)} –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–• —Å–ª–æ—Ç–æ–≤")
                elif status == "time_slots_detected":
                    successful_checks += 1
                    time_slots_detected = True
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      üïê –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–´ –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ ({len(slots)} —à—Ç.)")
                elif status == "time_slots_with_stop_words":
                    # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã, –Ω–æ –µ—Å—Ç—å –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
                    time_slots_detected = True
                    slots = result.get("slots", [])
                    all_found_slots.update(slots)
                    print(f"      ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –í–†–ï–ú–ï–ù–ù–´–ï –°–õ–û–¢–´ + –°–¢–û–ü-–°–õ–û–í–ê ({len(slots)} —à—Ç.)")
                else:
                    print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ï –ù–ê–ô–î–ï–ù–û")
                    
            elif config.check_type == "clickable":
                # –î–ª—è Zona Padela - –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤
                slots = await check_zona_padela_date_single(page, date, config)
                if slots:
                    successful_checks += 1
                    all_found_slots.update(slots)
                    print(f"      ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ê–ô–î–ï–ù–û {len(slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                else:
                    print(f"      ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt}: –ù–ï –ù–ê–ô–î–ï–ù–û")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < VERIFICATION_ATTEMPTS:
                await page.wait_for_timeout(ATTEMPT_DELAY * 1000)
                
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {config.sport_type} {date}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    final_slots = list(all_found_slots)
    
    print(f"  üìä –ò–¢–û–ì–ò –¢–†–û–ô–ù–û–ô –ü–†–û–í–ï–†–ö–ò –¥–ª—è {date}:")
    print(f"    ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {successful_checks}/{VERIFICATION_ATTEMPTS}")
    print(f"    üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: {'–î–ê' if time_slots_detected else '–ù–ï–¢'}")
    print(f"    üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(final_slots)}")
    
    # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ò–õ–ò –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    if successful_checks >= SUCCESS_THRESHOLD or (time_slots_detected and len(final_slots) > 0):
        print(f"    üéâ –î–ê–¢–ê {date} –ü–†–ò–ó–ù–ê–ù–ê –î–û–°–¢–£–ü–ù–û–ô!")
        logger.info(f"–î–∞—Ç–∞ {date} {config.sport_type} –ø—Ä–∏–∑–Ω–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π: {len(final_slots)} —Å–ª–æ—Ç–æ–≤")
        return final_slots
    else:
        print(f"    ‚ùå –î–∞—Ç–∞ {date} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)")
        return []

# ‚îÄ‚îÄ‚îÄ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def check_site_comprehensive(config: SiteConfig) -> Dict:
    """üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º"""
    print(f"\nüîç –ü–†–û–í–ï–†–Ø–ï–ú: {config.name}")
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {config.name}")
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=True,
            args=[
                '--no-sandbox',
                '--disable-dev-shm-usage',
                '--disable-blink-features=AutomationControlled',
                '--disable-features=VizDisplayCompositor'
            ]
        )
        
        try:
            context = await browser.new_context(
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                viewport={'width': 1920, 'height': 1080}
            )
            
            page = await context.new_page()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
            try:
                await page.goto(config.url, wait_until="domcontentloaded", timeout=PAGE_LOAD_TIMEOUT)
                print(f"  ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {config.url}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return {"status": "error", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {e}"}
            
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if config.needs_auth and config.account_index is not None:
                print(f"  üîê –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
                auth_success = await login_to_winbox(page, config.account_index)
                if not auth_success:
                    print(f"  ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                    return {"status": "auth_failed", "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"}
                
                # –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                await page.goto(config.url, wait_until="domcontentloaded")
                print(f"  ‚úÖ –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if config.month_tab:
                try:
                    await page.wait_for_selector(f"text={config.month_tab}", timeout=ELEMENT_WAIT_TIMEOUT)
                    await page.click(f"text={config.month_tab}")
                    await page.wait_for_timeout(DEFAULT_WAIT)
                    print(f"  ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–µ—Å—è—Ü: {config.month_tab}")
                except PlaywrightTimeoutError:
                    print(f"  ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –º–µ—Å—è—Ü {config.month_tab}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –¥–∞—Ç—É
            all_available_dates = {}
            total_slots_found = 0
            
            for date in config.dates:
                print(f"\n  üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date}...")
                
                try:
                    available_slots = await verify_date_multiple_times(page, date, config)
                    
                    if available_slots:
                        all_available_dates[date] = available_slots
                        total_slots_found += len(available_slots)
                        print(f"  üéâ –î–∞—Ç–∞ {date}: –Ω–∞–π–¥–µ–Ω–æ {len(available_slots)} —Å–ª–æ—Ç–æ–≤")
                        logger.info(f"{config.name} - –¥–∞—Ç–∞ {date}: {len(available_slots)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
                    else:
                        print(f"  ‚ùå –î–∞—Ç–∞ {date}: —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date}: {e}")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {date} –Ω–∞ {config.name}: {e}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if all_available_dates:
                return {
                    "status": "success",
                    "available_dates": all_available_dates,
                    "total_slots": total_slots_found,
                    "message": f"–ù–∞–π–¥–µ–Ω–æ {total_slots_found} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
                }
            else:
                return {
                    "status": "no_slots",
                    "message": "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                }
                
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {config.name}: {e}")
            return {"status": "error", "message": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"}
        
        finally:
            await browser.close()

async def format_and_send_notifications(site_results: Dict[str, Dict]):
    """üì¨ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö"""
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    successful_sites = []
    failed_sites = []
    
    for site_name, result in site_results.items():
        if result.get("status") == "success":
            successful_sites.append((site_name, result))
        else:
            failed_sites.append((site_name, result))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –ù–ê–ô–î–ï–ù–ù–´–• —Å–ª–æ—Ç–∞—Ö
    if successful_sites:
        for site_name, result in successful_sites:
            available_dates = result.get("available_dates", {})
            total_slots = result.get("total_slots", 0)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_parts = [
                f"üéæ –ù–ê–ô–î–ï–ù–´ –°–õ–û–¢–´! üéæ",
                f"",
                f"üè¢ –°–∞–π—Ç: {site_name}",
                f"üìä –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: {total_slots}",
                f""
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –¥–∞—Ç–∞–º
            for date, slots in available_dates.items():
                notification_parts.append(f"üìÖ {date} –∞–≤–≥—É—Å—Ç–∞:")
                for slot in slots[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É
                    notification_parts.append(f"   ‚è∞ {slot}")
                if len(slots) > 10:
                    notification_parts.append(f"   ... –∏ –µ—â–µ {len(slots) - 10} —Å–ª–æ—Ç–æ–≤")
                notification_parts.append("")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            current_time = datetime.now().strftime("%H:%M:%S")
            notification_parts.append(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {current_time}")
            
            notification_text = "\n".join(notification_parts)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await send_notification(notification_text)
                print(f"üì¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {site_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {site_name}: {e}")
    else:
        print("üìµ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

async def main_monitoring_loop():
    """üîÑ –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"""
    print(f"üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–ü–û–†–¢–ò–í–ù–´–• –ü–õ–û–©–ê–î–û–ö")
    print(f"‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_EVERY} —Å–µ–∫—É–Ω–¥")
    print(f"üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(SITES)} —Å–∞–π—Ç–æ–≤:")
    
    for i, site in enumerate(SITES, 1):
        print(f"  {i}. {site.name} - {site.sport_type}")
        print(f"     üìÖ –î–∞—Ç—ã: {', '.join(site.dates)}")
        if site.enable_booking:
            print(f"     ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û ({site.slots_to_book} —Å–ª–æ—Ç–æ–≤)")
        else:
            print(f"     üëÄ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    print(f"\n" + "="*80)
    
    iteration = 0
    
    while True:
        iteration += 1
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        print(f"\nüîÑ –ò–¢–ï–†–ê–¶–ò–Ø {iteration} - {current_time}")
        print("="*80)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
        all_results = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
        for site in SITES:
            try:
                result = await check_site_comprehensive(site)
                all_results[site.name] = result
                
                # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.get("status") == "success":
                    total_slots = result.get("total_slots", 0)
                    print(f"‚úÖ {site.name}: {total_slots} —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    status_msg = result.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    print(f"‚ùå {site.name}: {status_msg}")
                    
            except Exception as e:
                print(f"‚ùå {site.name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {site.name}: {e}")
                all_results[site.name] = {"status": "error", "message": str(e)}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö
        try:
            await format_and_send_notifications(all_results)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        successful_sites = sum(1 for r in all_results.values() if r.get("status") == "success")
        total_slots = sum(r.get("total_slots", 0) for r in all_results.values() if r.get("status") == "success")
        
        print(f"\nüìä –ò–¢–û–ì–ò –ò–¢–ï–†–ê–¶–ò–ò {iteration}:")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {successful_sites}/{len(SITES)}")
        print(f"  üéØ –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_slots}")
        print(f"  ‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_EVERY} —Å–µ–∫—É–Ω–¥...")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        await asyncio.sleep(CHECK_EVERY)

if __name__ == "__main__":
    try:
        asyncio.run(main_monitoring_loop())
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")