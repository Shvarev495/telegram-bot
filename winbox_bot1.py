import asyncio
import re
import logging
from datetime import datetime
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError
from telegram import Bot
from dataclasses import dataclass
from typing import List, Optional

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
log_filename = f'multi_sport_monitor_{datetime.now().strftime("%Y%m%d")}.log'
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# === –ü–ê–†–ê–ú–ï–¢–†–´ ===
TELEGRAM_TOKEN = "8195557403:AAGGWvI04F0jxswbDsk6gVQohz6KChBAho0"
CHAT_IDS = [
    "1599566837"
]

CHECK_EVERY = 1  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
VERIFICATION_ATTEMPTS = 3  # —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
SUCCESS_THRESHOLD = 2      # –º–∏–Ω–∏–º—É–º —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–æ—Ç–æ–≤
ATTEMPT_DELAY = 1          # –ø–∞—É–∑–∞ (—Å) –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Ç—Ä–æ–π–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ

# ü§ñ –ê–í–¢–û–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï (–¥–ª—è WinBox)
AUTO_BOOKING_WINBOX = True      # –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ WinBox
BOOK_FROM_LATE = True           # –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ–∑–¥–Ω–∏—Ö —Å–ª–æ—Ç–æ–≤ (True) –∏–ª–∏ —Å —Ä–∞–Ω–Ω–∏—Ö (False)
MAX_BOOKING_ATTEMPTS = 5        # –º–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –ø–æ–∏—Å–∫
BOOKING_DELAY = 1               # –ø–∞—É–∑–∞ (—Å) –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# üéæ –ö–û–õ–ò–ß–ï–°–¢–í–û –°–õ–û–¢–û–í –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
PADEL_SLOTS_TO_BOOK = 2  # –Ω–∞ WinBox (–ø–∞–¥–µ–ª)
ZONA_SLOTS_TO_BOOK = 1   # –Ω–∞ Zona Padela (–∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)

# üîê –î–ê–ù–ù–´–ï –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò WINBOX (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
WINBOX_PHONE = "shvarev03@gmail.com"
WINBOX_PASSWORD = "7538tuti"

# ‚è∞ –¢–ê–ô–ú–ê–£–¢–´
PAGE_LOAD_TIMEOUT = 60000     # –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
ELEMENT_WAIT_TIMEOUT = 45000  # –º–∞–∫—Å–∏–º—É–º 45 —Å–µ–∫ –Ω–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
DEFAULT_WAIT = 1500           # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ (–º—Å)

@dataclass
class SiteConfig:
    name: str
    url: str
    dates: List[str]
    month_tab: Optional[str] = None
    check_type: str = "slots"    # "slots" –¥–ª—è WinBox, "clickable" –¥–ª—è Zona Padela
    sport_type: str = "padel"
    slots_to_book: int = 1
    needs_auth: bool = False
    enable_booking: bool = False
    date_in_url: bool = False

# üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ê–ô–¢–û–í –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
SITES = [
    SiteConfig(
        name="Winbox –ü–∞–¥–µ–ª",
        url="https://winboxmsk.ru/schedule?types=padel",
        dates=["21", "22", "23", "24"],   # —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –¥–∞—Ç—ã (–¥–Ω–∏ –º–µ—Å—è—Ü–∞)
        month_tab="–ê–í–ì–£–°–¢",               # –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–µ—Å—è—Ü–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
        check_type="slots",
        sport_type="padel",
        slots_to_book=PADEL_SLOTS_TO_BOOK,
        needs_auth=True,
        enable_booking=True,
        date_in_url=False
    ),
    SiteConfig(
        name="Zona Padela",
        url="https://n1594888.yclients.com/company/1434507/activity/select?o=act",  # –±–∞–∑–æ–≤—ã–π URL (–¥–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
        dates=["21", "22", "23", "24"],
        month_tab="–ê–≤–≥—É—Å—Ç",               # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
        check_type="clickable",
        sport_type="padel",
        slots_to_book=ZONA_SLOTS_TO_BOOK,
        needs_auth=False,
        enable_booking=False,
        date_in_url=True
    )
]

# ‚úÖ –°–¢–û–ü-–°–õ–û–í–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–†–ê–ù–ò–¶
STOP_WORDS_WINBOX = [
    "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "win box –æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "winbox –æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–≤–µ—Ä–Ω—ë–º—Å—è —Å–∫–æ—Ä–æ",
    "–Ω–µ—Ç –º–µ—Å—Ç",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
    "–æ—Ç–¥—ã—Ö–∞–µ—Ç",
    "–∑–∞–∫—Ä—ã—Ç–æ",
    "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
]
CRITICAL_STOP_WORDS_ZONA = [
    "–Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
    "—Å–æ–±—ã—Ç–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
    "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
    "—Å–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
    "–∑–∞–∫—Ä—ã—Ç–æ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
    "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
]

# === –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò WINBOX ===
async def login_to_winbox(page) -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ WinBox —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫."""
    print("    üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ WinBox...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ –≤—Ö–æ–¥ —É–∂–µ
        profile_indicators = [
            ':has-text("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")',
            ':has-text("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")',
            ':has-text("–í—ã–π—Ç–∏")',
            '[class*="profile"]',
            '[class*="user"]',
            ':has-text("–ú–æ–∏ –∑–∞–ø–∏—Å–∏")'
        ]
        for selector in profile_indicators:
            try:
                element = await page.query_selector(selector)
                if element and await element.is_visible():
                    print("    ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–∞ WinBox")
                    return True
            except:
                continue

        # –ò—â–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ä–∞–∑—É)
        auth_triggers = [
            'button:has-text("–í–•–û–î")',
            'button:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'button:has-text("–í–æ–π—Ç–∏")',
            'a:has-text("–í–•–û–î")',
            'a:has-text("–ê–í–¢–û–†–ò–ó–û–í–ê–¢–¨–°–Ø")',
            'a:has-text("–í–æ–π—Ç–∏")',
            '[class*="auth"]',
            '[class*="login"]'
        ]
        email_field = None
        password_field = None

        # –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É –Ω–∞–π—Ç–∏ –ø–æ–ª–µ email –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        email_selectors = [
            'input[type="email"]',
            'input[placeholder*="–ø–æ—á—Ç"]',
            'input[placeholder*="mail"]',
            'input[name*="email"]',
            'input[id*="email"]',
            'input[autocomplete="email"]',
            'input[autocomplete="username"]'
        ]
        for selector in email_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    email_field = field
                    print("    üìß –ü–æ–ª–µ –¥–ª—è email –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    break
            except:
                continue

        # –ï—Å–ª–∏ –ø–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ –≤—Ö–æ–¥–∞, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not email_field:
            for trigger in auth_triggers:
                try:
                    buttons = await page.query_selector_all(trigger)
                    for btn in buttons:
                        if await btn.is_visible():
                            btn_text = (await btn.text_content() or "").strip()
                            print(f'    üîò –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤—Ö–æ–¥–∞: "{btn_text}"')
                            await btn.click()
                            await page.wait_for_timeout(1000)
                            break
                    if email_field:
                        break
                except:
                    continue
            # –ü–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É, —Å–Ω–æ–≤–∞ –∏—â–µ–º –ø–æ–ª–µ email
            for selector in email_selectors:
                try:
                    field = await page.query_selector(selector)
                    if field and await field.is_visible():
                        email_field = field
                        print("    üìß –ü–æ–ª–µ email –ø–æ—è–≤–∏–ª–æ—Å—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã")
                        break
                except:
                    continue

        if not email_field:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ email –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
            return False

        # –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        password_selectors = [
            'input[type="password"]',
            'input[placeholder*="–∞—Ä–æ–ª—å"]',  # —É—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ "–ü–∞—Ä–æ–ª—å", "–ø–∞—Ä–æ–ª—å"
            'input[name*="password"]',
            'input[id*="password"]',
            'input[autocomplete="current-password"]'
        ]
        for selector in password_selectors:
            try:
                field = await page.query_selector(selector)
                if field and await field.is_visible():
                    password_field = field
                    print("    üîë –ü–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                    break
            except:
                continue

        if not password_field:
            print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è")
            return False

        # –í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print(f"    üìß –í–≤–æ–¥–∏–º email: {WINBOX_PHONE}")
        await email_field.click()
        await email_field.fill("")  # –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await page.wait_for_timeout(200)
        await email_field.type(WINBOX_PHONE, delay=100)
        await page.wait_for_timeout(300)

        print("    üîë –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å")
        await password_field.click()
        await password_field.fill("")
        await page.wait_for_timeout(200)
        await password_field.type(WINBOX_PASSWORD, delay=100)
        await page.wait_for_timeout(300)

        # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞
        submit_selectors = [
            'button:has-text("–í–æ–π—Ç–∏")',
            'button:has-text("–í–û–ô–¢–ò")',
            'button[type="submit"]',
            'input[type="submit"]'
        ]
        submit_button = None
        for selector in submit_selectors:
            try:
                candidates = await page.query_selector_all(selector)
                for btn in candidates:
                    if await btn.is_visible():
                        enabled = await btn.evaluate('el => !el.disabled')
                        if enabled:
                            submit_button = btn
                            break
                if submit_button:
                    break
            except:
                continue

        if submit_button:
            print("    üëÜ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –í–æ–π—Ç–∏")
            await submit_button.click()
        else:
            print("    ‚å®Ô∏è –ù–∞–∂–∏–º–∞–µ–º Enter –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞")
            await password_field.press('Enter')

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await page.wait_for_timeout(5000)
        for selector in profile_indicators:
            try:
                element = await page.query_selector(selector)
                if element and await element.is_visible():
                    print("    ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ—Ñ–∏–ª—è)")
                    logger.info("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç WinBox")
                    return True
            except:
                continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        error_indicators = [
            ':has-text("–ù–µ–≤–µ—Ä–Ω—ã–π")',
            ':has-text("–æ—à–∏–±–∫–∞")',
            ':has-text("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω")',
            '[class*="error"]',
            '[role="alert"]'
        ]
        for selector in error_indicators:
            try:
                err_elem = await page.query_selector(selector)
                if err_elem and await err_elem.is_visible():
                    err_text = (await err_elem.text_content() or "").strip()
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {err_text}")
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox: {err_text}")
                    return False
            except:
                continue

        # –ï—Å–ª–∏ –Ω–∏ —É—Å–ø–µ—Ö, –Ω–∏ –æ—à–∏–±–∫–∞ —è–≤–Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å
        print("    ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Ö–æ–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –±—É–¥—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        return True

    except Exception as e:
        print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox: {e}")
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ WinBox: {e}")
        return False

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
async def send_notification(text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º –≤ Telegram."""
    bot = Bot(TELEGRAM_TOKEN)
    for chat_id in CHAT_IDS:
        try:
            await bot.send_message(chat_id=chat_id, text=text, parse_mode="Markdown")
            print(f"üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—á–∞—Ç {chat_id})")
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {chat_id}: {e}")

def check_critical_stop_words(text: str, stop_words: List[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ª—é–±—ã—Ö —Å—Ç–æ–ø-—Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ."""
    if not text:
        return False
    text_lower = text.lower()
    for word in stop_words:
        if word.lower() in text_lower:
            print(f"    üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ: \"{word}\"")
            logger.warning(f"–ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {word}")
            return True
    return False

def parse_time_slot(slot_text: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è —Å–ª–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã). –ù–∞–ø—Ä–∏–º–µ—Ä, '9:30' -> (9, 30)."""
    match = re.search(r'(\d{1,2}):(\d{2})', slot_text)
    if match:
        return int(match.group(1)), int(match.group(2))
    return (0, 0)

# === –§–£–ù–ö–¶–ò–ò –ê–ù–ê–õ–ò–ó–ê –°–õ–û–¢–û–í (ZONA PADELA) ===
async def determine_slot_availability(text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–æ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'available' –∏–ª–∏ 'unavailable'."""
    t = text.lower()
    # –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    for marker in ["–Ω–µ—Ç –º–µ—Å—Ç", "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", "–∑–∞–Ω—è—Ç–æ", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ", "–∑–∞–∫—Ä—ã—Ç–æ", "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ", "–æ—Å—Ç–∞–ª–æ—Å—å: 0", "–º–µ—Å—Ç: 0"]:
        if marker in t:
            return "unavailable"
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ "–æ—Å—Ç–∞–ª–æ—Å—å X"
    match = re.search(r'–æ—Å—Ç–∞–ª–æ—Å—å\s+(\d+)', t)
    if match:
        count = int(match.group(1))
        return "available" if count > 0 else "unavailable"
    # –î—Ä—É–≥–∏–µ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
    match2 = re.search(r'(\d+)\s*–º–µ—Å—Ç', t)
    if match2:
        count = int(match2.group(1))
        return "available" if count > 0 else "unavailable"
    # –Ø–≤–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    for marker in ["–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "–¥–æ—Å—Ç—É–ø–Ω–æ", "—Å–≤–æ–±–æ–¥–Ω", "–µ—Å—Ç—å –º–µ—Å—Ç–∞"]:
        if marker in t:
            return "available"
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º
    return "unavailable"

async def analyze_available_slots(page, date: str) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É Zona Padela –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω (—á—á:–º–º)."""
    print(f"      üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {date}...")
    try:
        page_text = await page.evaluate('() => document.body.innerText')  # –ø–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–±—ã—Ç–∏–π
        date_specific_stops = [
            f"{date} –∞–≤–≥—É—Å—Ç–∞ ‚Äî –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"{date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π",
            f"–Ω–∞ {date} –∞–≤–≥—É—Å—Ç–∞ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π"
        ]
        if check_critical_stop_words(page_text, CRITICAL_STOP_WORDS_ZONA + date_specific_stops):
            return []  # –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–æ—Ç–æ–≤/—Å–æ–±—ã—Ç–∏–π

        available_times = []
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–æ "–æ—Å—Ç–∞–ª–æ—Å—å" (–ø—Ä–∏–∑–Ω–∞–∫ —Å–ª–æ—Ç–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–µ—Å—Ç)
        elements = await page.query_selector_all('*:has-text("–æ—Å—Ç–∞–ª–æ—Å—å")')
        for elem in elements:
            text = (await elem.text_content() or "")
            if "–æ—Å—Ç–∞–ª–æ—Å—å" in text.lower():
                time_match = re.search(r'(\d{1,2}:\d{2})', text)
                status = await determine_slot_availability(text)
                if time_match and status == "available":
                    available_times.append(time_match.group(1))
                    print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç: {time_match.group(1)}")
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞
        available_times = sorted(set(available_times))
        if available_times:
            print(f"      üéæ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date}: {', '.join(available_times)}")
        else:
            print(f"      ‚ùå –ù–∞ {date} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        return available_times
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–ª–æ—Ç–æ–≤ (Zona Padela): {e}")
        logger.error(f"Zona Padela - –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–∞—Ç—É {date}: {e}")
        return []

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –°–õ–û–¢–û–í (WINBOX) ===
async def close_modal_and_return(page):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    try:
        selectors = [
            'button[aria-label="Close"]',
            'button:has-text("–ó–∞–∫—Ä—ã—Ç—å")',
            'button:has-text("‚úï")',
            'button:has-text("√ó")',
            'button:has-text("X")'
        ]
        for sel in selectors:
            try:
                btn = await page.query_selector(sel)
                if btn and await btn.is_visible():
                    await btn.click()
                    await page.wait_for_timeout(500)
                    print("        üîê –ó–∞–∫—Ä—ã–ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return True
            except:
                continue
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–∂–∞—Ç—å Escape, –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞—à–ª–∏
        await page.keyboard.press("Escape")
        return True
    except Exception:
        return False

async def reload_page_for_date(page, config: SiteConfig, date: str):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è WinBox –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü –∏ –¥–∞—Ç—É –∑–∞–Ω–æ–≤–æ."""
    try:
        await page.goto(config.url, wait_until="networkidle")
        await page.wait_for_timeout(1000)
        if config.month_tab:
            try:
                await page.click(f"text={config.month_tab}")
                await page.wait_for_timeout(500)
                print(f"          üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–µ—Å—è—Ü {config.month_tab} (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)")
            except:
                pass
        # –ö–ª–∏–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–∞—Ç—É –Ω–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'[data-date="{date}"]',
            f'[data-day="{date}"]',
            f'td:has-text("{date}")'
        ]
        for sel in selectors:
            try:
                elements = await page.query_selector_all(sel)
                for el in elements:
                    text = (await el.text_content() or "").strip()
                    if text == date and await el.is_visible():
                        await el.click()
                        await page.wait_for_timeout(500)
                        print(f"          üîÑ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–Ω–æ–≤–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ {date}")
                        return True
            except:
                continue
        return False
    except Exception as e:
        print(f"          ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WinBox: {e}")
        return False

async def try_book_winbox_slot(page, slot_element, slot_text: str) -> bool:
    """–ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –Ω–∞ WinBox."""
    try:
        print(f"            üè∏ –ö–ª–∏–∫–∞–µ–º –ø–æ —Å–ª–æ—Ç—É {slot_text} –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        await slot_element.click()
        await page.wait_for_timeout(500)
        # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ)
        confirm_selectors = [
            'button:has-text("–ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨")',
            'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
            'button:has-text("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")',
            'button[type="submit"]'
        ]
        confirm_btn = None
        for sel in confirm_selectors:
            try:
                btn = await page.query_selector(sel)
                if btn and await btn.is_visible():
                    confirm_btn = btn
                    break
            except:
                continue
        if not confirm_btn:
            print("            ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ –æ–∫–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False

        print("            üëÜ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å/–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞")
        await confirm_btn.click()
        await page.wait_for_timeout(1000)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        success_indicators = [
            ':has-text("—É—Å–ø–µ—à–Ω–æ")',
            ':has-text("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")',
            ':has-text("–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")',
            '[class*="success"]'
        ]
        for sel in success_indicators:
            try:
                success_elem = await page.query_selector(sel)
                if success_elem and await success_elem.is_visible():
                    print("            ‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (–æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—Ö–µ)")
                    return True
            except:
                continue

        # –ï—Å–ª–∏ —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        await page.wait_for_timeout(500)
        still_available = await page.query_selector(f'button:has-text("{slot_text}")')
        if not still_available:
            print("            ‚úÖ –°–ª–æ—Ç –∏—Å—á–µ–∑ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ)")
            return True

        print("            ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞")
        return False
    except Exception as e:
        print(f"            ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞ {slot_text}: {e}")
        return False

async def book_winbox_slots(page, date: str, config: SiteConfig) -> List[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ WinBox –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    booked_slots = []
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        time_selectors = [
            'button:has-text(":")',
            '[class*="slot"]:has-text(":")',
            '[data-time]'
        ]
        available_slots = []
        for sel in time_selectors:
            try:
                slot_elements = await page.query_selector_all(sel)
                for slot in slot_elements:
                    text = (await slot.text_content() or "").strip()
                    if text and ':' in text and len(text) < 6:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω (–Ω–µ –∑–∞–¥–∏–∑–µ–π–±–ª–µ–Ω –∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π)
                        is_disabled = await slot.evaluate('el => el.disabled || el.classList.contains("disabled") or el.classList.contains("booked") or el.classList.contains("unavailable")')
                        if not is_disabled:
                            available_slots.append((slot, text))
            except:
                continue

        if not available_slots:
            return []  # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ–∑–¥–Ω–∏–µ -> —Ä–∞–Ω–Ω–∏–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
        available_slots.sort(key=lambda x: parse_time_slot(x[1]), reverse=BOOK_FROM_LATE)
        print(f"        ‚è≥ –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {len(available_slots)}. –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ({'—Å –ø–æ–∑–¥–Ω–∏—Ö' if BOOK_FROM_LATE else '—Å —Ä–∞–Ω–Ω–∏—Ö'}).")

        attempts = 0
        success = 0
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for slot_elem, slot_time in available_slots:
            if attempts >= MAX_BOOKING_ATTEMPTS or success >= config.slots_to_book:
                break
            attempts += 1
            if await try_book_winbox_slot(page, slot_elem, slot_time):
                booked_slots.append(slot_time)
                success += 1
                logger.info(f"WinBox: —Å–ª–æ—Ç {slot_time} –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–æ—Ç–æ–≤
                await close_modal_and_return(page)
                await reload_page_for_date(page, config, date)
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –±—É–¥–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç)
            await asyncio.sleep(BOOKING_DELAY)

        if success:
            print(f"        üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: {success}")
        return booked_slots
    except Exception as e:
        print(f"        ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ WinBox: {e}")
        return booked_slots

# === –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò (–û–î–ù–û–ö–†–ê–¢–ù–û–ô) –î–õ–Ø –ö–ê–ñ–î–û–ì–û –°–ê–ô–¢–ê ===
async def check_winbox_date_once(page, date: str, config: SiteConfig) -> (bool, List[str], List[str]):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ WinBox –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥, —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –∏ —Å–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    print(f"    üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date} (WinBox)...")
    try:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü
        if config.month_tab:
            try:
                await page.click(f"text={config.month_tab}")
                await page.wait_for_timeout(500)
                print(f"      üìÜ –í—ã–±—Ä–∞–ª–∏ –≤–∫–ª–∞–¥–∫—É –º–µ—Å—è—Ü–∞: {config.month_tab}")
            except:
                pass

        # –ö–ª–∏–∫–∞–µ–º –ø–æ –¥–∞—Ç–µ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        date_element = None
        selectors = [
            f'button:has-text("{date}")',
            f'div:has-text("{date}")',
            f'[data-date="{date}"]',
            f'td:has-text("{date}")'
        ]
        for sel in selectors:
            try:
                elements = await page.query_selector_all(sel)
                for el in elements:
                    txt = (await el.text_content() or "").strip()
                    if txt == date and await el.is_visible():
                        date_element = el
                        break
                if date_element:
                    break
            except:
                continue

        if not date_element:
            print(f"      ‚ùå –î–∞—Ç–∞ {date} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞ WinBox")
            return (False, [], [])
        await date_element.click()
        await page.wait_for_timeout(500)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç.–ø.)
        page_text = await page.evaluate('() => document.body.innerText')
        if check_critical_stop_words(page_text, STOP_WORDS_WINBOX):
            return (False, [], [])

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
        available_slots = []
        slot_buttons = await page.query_selector_all('button:has-text(":")')
        for btn in slot_buttons:
            text = (await btn.text_content() or "").strip()
            if text and ':' in text and len(text) < 6:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –Ω–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
                disabled = await btn.evaluate('el => el.disabled || el.classList.contains("disabled") || el.classList.contains("booked") || el.classList.contains("unavailable")')
                if not disabled:
                    available_slots.append(text)
        if available_slots:
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: {', '.join(available_slots)}")
        else:
            print("      ‚õî –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç")

        # –ï—Å–ª–∏ —Å–ª–æ—Ç—ã –µ—Å—Ç—å –∏ –∞–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Äì –ø—Ä–æ–±—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
        booked = []
        if available_slots and config.enable_booking and AUTO_BOOKING_WINBOX:
            print("      ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã...")
            booked = await book_winbox_slots(page, date, config)
            if booked:
                print(f"      ü§ñ –ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã {', '.join(booked)}")

        return (len(available_slots) > 0, available_slots, booked)
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã {date} –Ω–∞ WinBox: {e}")
        logger.error(f"WinBox: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {date}: {e}")
        return (False, [], [])

async def check_zona_date_once(page, date: str, config: SiteConfig) -> (bool, List[str]):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –Ω–∞ Zona Padela –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã (–æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ –∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω."""
    print(f"    üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É {date} (Zona Padela)...")
    try:
        if config.date_in_url:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–∞—Ç—ã (YYYY-MM-DD) –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
            full_date = f"2025-08-{str(date).zfill(2)}"
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ URL —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä date, –µ—Å–ª–∏ –µ—Å—Ç—å
            base_url = re.sub(r'(\?|&)date=[0-9\-]+', '', config.url)
            joiner = '&' if '?' in base_url else '?'
            target_url = f"{base_url}{joiner}date={full_date}"
            await page.goto(target_url, wait_until="networkidle")
            await page.wait_for_timeout(1000)
            print(f"      üîó –û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É {full_date}")
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            await page.goto(config.url, wait_until="domcontentloaded")
            await page.wait_for_timeout(1000)
            if config.month_tab:
                try:
                    await page.click(f"text={config.month_tab}")
                    await page.wait_for_timeout(500)
                    print(f"      üìÜ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –º–µ—Å—è—Ü {config.month_tab}")
                except:
                    pass
            # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            date_element = None
            date_selectors = [
                f'td:has-text("{date}"):not([class*="other-month"]):not([class*="disabled"])',
                f'button:has-text("{date}"):not([disabled])',
                f'div:has-text("{date}"):not([class*="disabled"])'
            ]
            for sel in date_selectors:
                try:
                    elements = await page.query_selector_all(sel)
                    for el in elements:
                        txt = (await el.text_content() or "").strip()
                        # –£–±–∏—Ä–∞–µ–º –ª–∏–¥–∏—Ä—É—é—â–∏–π –Ω–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '08' -> '8') –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
                        if txt == str(int(date)):
                            date_element = el
                            break
                    if date_element:
                        break
                except:
                    continue

            if not date_element:
                print(f"      ‚ùå –î–∞—Ç–∞ {date} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ Zona Padela")
                return (False, [])
            await date_element.click()
            await page.wait_for_timeout(1000)
            print(f"      üìÜ –ù–∞–∂–∞–ª–∏ –Ω–∞ –¥–∞—Ç—É {date} –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ")
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        available_times = await analyze_available_slots(page, date)
        return (len(available_times) > 0, available_times)
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞—Ç—ã {date} –Ω–∞ Zona Padela: {e}")
        logger.error(f"Zona Padela: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {date}: {e}")
        return (False, [])

# === –ú–ù–û–ì–û–ö–†–ê–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê (–¢–†–û–ô–ù–ê–Ø) –î–õ–Ø –ù–ê–î–Å–ñ–ù–û–°–¢–ò ===
async def verify_winbox_date(page, date: str, config: SiteConfig) -> dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–æ–π–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã –Ω–∞ WinBox –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–æ—Ç–æ–≤."""
    success_count = 0
    any_slots = []
    all_booked = []
    for attempt in range(1, VERIFICATION_ATTEMPTS + 1):
        print(f"  üîÑ WinBox {date}: –ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {VERIFICATION_ATTEMPTS}...")
        found, slots, booked = await check_winbox_date_once(page, date, config)
        if found:
            success_count += 1
            if not any_slots:  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ —Å –ø–µ—Ä–≤–æ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                any_slots = slots
            if booked:
                all_booked.extend(booked)  # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É
            print("  ‚úÖ –ù–∞ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ª–æ—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        else:
            print("  ‚ùå –ù–∞ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ª–æ—Ç—ã –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        if attempt < VERIFICATION_ATTEMPTS:
            await asyncio.sleep(ATTEMPT_DELAY)

    confirmed = (success_count >= SUCCESS_THRESHOLD) or (len(all_booked) > 0)
    if confirmed:
        print(f"  üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–∞—Ç–∞ {date} - –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û ({success_count}/{VERIFICATION_ATTEMPTS} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)")
    else:
        print(f"  ‚õî –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–∞—Ç–∞ {date} - —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù–û –Ω–∞–¥—ë–∂–Ω–æ ({success_count}/{VERIFICATION_ATTEMPTS} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)")

    return {
        "status": "available" if confirmed else "no_slots",
        "slots": any_slots,
        "booked_slots": all_booked
    }

async def verify_zona_date(page, date: str, config: SiteConfig) -> dict:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–æ–π–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã –Ω–∞ Zona Padela –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è —Å–ª–æ—Ç–æ–≤."""
    success_count = 0
    any_slots = []
    for attempt in range(1, VERIFICATION_ATTEMPTS + 1):
        print(f"  üîÑ Zona Padela {date}: –ø–æ–ø—ã—Ç–∫–∞ {attempt} –∏–∑ {VERIFICATION_ATTEMPTS}...")
        found, slots = await check_zona_date_once(page, date, config)
        if found:
            success_count += 1
            if not any_slots:
                any_slots = slots
            print("  ‚úÖ –ù–∞ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ª–æ—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        else:
            print("  ‚ùå –ù–∞ —ç—Ç–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å–ª–æ—Ç—ã –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        if attempt < VERIFICATION_ATTEMPTS:
            await asyncio.sleep(ATTEMPT_DELAY)

    confirmed = (success_count >= SUCCESS_THRESHOLD)
    if confirmed:
        print(f"  üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–∞—Ç–∞ {date} - –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ—Ç–æ–≤ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û ({success_count}/{VERIFICATION_ATTEMPTS} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)")
    else:
        print(f"  ‚õî –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–∞—Ç–∞ {date} - —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù–û –Ω–∞–¥—ë–∂–Ω–æ ({success_count}/{VERIFICATION_ATTEMPTS} —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)")

    return {
        "status": "available" if confirmed else "no_slots",
        "slots": any_slots,
        "booked_slots": []  # –Ω–∞ Zona Padela –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
    }

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===
async def monitor_sites():
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤...")
    logger.info("–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤")
    async with async_playwright() as p:
        browser = await p.chromium.launch(
            headless=False,  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –≤–∏–¥–∏–º—ã–π –±—Ä–∞—É–∑–µ—Ä
            args=['--no-sandbox', '--disable-blink-features=AutomationControlled']
        )
        context = await browser.new_context(
            viewport={"width": 1920, "height": 1080},
            user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/100.0.0.0 Safari/537.36'
        )
        page = await context.new_page()
        previous_states: dict = {}  # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ site+date

        try:
            while True:
                print(f"\n=== –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")
                for site in SITES:
                    print(f"\nüè¢ –°–∞–π—Ç: {site.name} | URL: {site.url}")
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç–∞
                    try:
                        await page.goto(site.url, wait_until="networkidle", timeout=PAGE_LOAD_TIMEOUT)
                        await page.wait_for_timeout(1000)
                        if site.needs_auth:
                            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è WinBox –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                            if not await login_to_winbox(page):
                                print(f"‚ùå {site.name}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è)")
                                logger.error(f"{site.name}: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å–∞–π—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
                                continue
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {site.name}: {e}")
                        logger.error(f"{site.name}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - {e}")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∞–π—Ç–∞
                    for date in site.dates:
                        site_date_key = f"{site.name}_{date}"
                        if "winbox" in site.url.lower():
                            result = await verify_winbox_date(page, date, site)
                        else:
                            result = await verify_zona_date(page, date, site)

                        prev_status = previous_states.get(site_date_key, {}).get("status")
                        # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ–π –¥–∞—Ç–µ —Å–ª–æ—Ç—ã —Å–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã, –∞ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–∏ (–∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                        if result["status"] == "available" and prev_status != "available":
                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            slots_info = ""
                            if result.get("slots") and result["slots"]:
                                # –±–µ—Ä–µ–º –¥–æ 3 –≤—Ä–µ–º–µ–Ω –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                preview = ", ".join(result["slots"][:3])
                                if len(result["slots"]) > 3:
                                    preview += "..."
                                slots_info = f"‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã: {preview}"
                            message = (
                                f"üéæ *{site.name}* ‚Äì –ø–æ—è–≤–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã!\n"
                                f"üìÖ –î–∞—Ç–∞: {date} –∞–≤–≥—É—Å—Ç–∞\n"
                                f"{slots_info}\n"
                                f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ]({site.url})"
                            )
                            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ
                            if result.get("booked_slots"):
                                booked_list = ", ".join(result["booked_slots"])
                                message += f"\nü§ñ *–ê–≤—Ç–æ–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:* –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–æ—Ç—ã {booked_list}"
                            print(f"üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {date} —á–∏—Å–ª–æ")
                            await send_notification(message)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
                        previous_states[site_date_key] = result
                        await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –¥–∞—Ç
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {CHECK_EVERY} —Å–µ–∫. –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
                await asyncio.sleep(CHECK_EVERY)
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            await send_notification(f"üí• *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏*:\n`{e}`")
        finally:
            await context.close()
            await browser.close()

if __name__ == "__main__":
    try:
        asyncio.run(monitor_sites())
    except KeyboardInterrupt:
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
